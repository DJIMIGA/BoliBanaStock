#!/usr/bin/env python3
"""
Script de test pour le CRUD des codes-barres via l'API frontend
Teste toutes les op√©rations CRUD en utilisant les endpoints API r√©els
"""

import os
import sys
import django
import requests
import json

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bolibanastock.settings')
django.setup()

from app.inventory.models import Product, Category, Brand, Barcode
from app.core.models import Configuration
from django.contrib.auth import get_user_model

def create_test_data():
    """Cr√©er des donn√©es de test"""
    print("üîß Cr√©ation des donn√©es de test...")
    
    # Cr√©er un utilisateur de test
    User = get_user_model()
    
    test_user, created = User.objects.get_or_create(
        username='testuser',
        defaults={
            'email': 'test@example.com',
            'first_name': 'Test',
            'last_name': 'User',
            'is_staff': True,
            'is_superuser': True
        }
    )
    
    # Cr√©er ou r√©cup√©rer la configuration du site
    config, created = Configuration.objects.get_or_create(
        site_name="Test Site",
        defaults={
            'devise': 'FCFA',
            'tva': 19.0,
            'nom_societe': 'Test Company',
            'adresse': 'Test Address',
            'telephone': '123456789',
            'email': 'test@example.com',
            'site_owner': test_user
        }
    )
    
    # Cr√©er ou r√©cup√©rer une cat√©gorie
    category, created = Category.objects.get_or_create(
        name="Test Category",
        defaults={'description': 'Cat√©gorie de test'}
    )
    
    # Cr√©er ou r√©cup√©rer une marque
    brand, created = Brand.objects.get_or_create(
        name="Test Brand",
        defaults={'description': 'Marque de test'}
    )
    
    # Cr√©er ou r√©cup√©rer des produits de test
    product1, created = Product.objects.get_or_create(
        name="Produit Test API 1",
        defaults={
            'cug': 'TESTAPI001',
            'category': category,
            'brand': brand,
            'selling_price': 1000,
            'quantity': 100,
            'is_active': True
        }
    )
    
    product2, created = Product.objects.get_or_create(
        name="Produit Test API 2",
        defaults={
            'cug': 'TESTAPI002',
            'category': category,
            'brand': brand,
            'selling_price': 2000,
            'quantity': 50,
            'is_active': True
        }
    )
    
    print(f"‚úÖ Produit 1 cr√©√©: {product1.name} (ID: {product1.id})")
    print(f"‚úÖ Produit 2 cr√©√©: {product2.name} (ID: {product2.id})")
    
    return product1, product2, test_user

def test_api_endpoints():
    """Tester les endpoints de l'API"""
    print("\nüß™ Test des endpoints de l'API")
    print("=" * 50)
    
    try:
        # Cr√©er les donn√©es de test
        product1, product2, test_user = create_test_data()
        
        # Configuration de base pour les requ√™tes
        base_url = "http://localhost:8000"  # Ajuster selon votre configuration
        headers = {
            'Content-Type': 'application/json',
        }
        
        print(f"üåê Test de l'API sur: {base_url}")
        
        # Test 1: V√©rifier que l'API est accessible
        print("\n1Ô∏è‚É£ Test de connectivit√© API...")
        try:
            response = requests.get(f"{base_url}/api/v1/", headers=headers, timeout=5)
            if response.status_code == 200:
                print("‚úÖ API accessible")
            else:
                print(f"‚ö†Ô∏è API accessible mais statut: {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"‚ùå API non accessible: {e}")
            print("üí° Assurez-vous que le serveur Django est en cours d'ex√©cution")
            return False
        
        # Test 2: Lister les produits
        print("\n2Ô∏è‚É£ Test de listage des produits...")
        try:
            response = requests.get(f"{base_url}/api/v1/products/", headers=headers, timeout=5)
            if response.status_code == 200:
                products = response.json()
                print(f"‚úÖ {len(products)} produits trouv√©s dans l'API")
            else:
                print(f"‚ùå Erreur lors du listage: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Erreur lors du test de listage: {e}")
        
        # Test 3: R√©cup√©rer un produit sp√©cifique
        print("\n3Ô∏è‚É£ Test de r√©cup√©ration d'un produit...")
        try:
            response = requests.get(f"{base_url}/api/v1/products/{product1.id}/", headers=headers, timeout=5)
            if response.status_code == 200:
                product_data = response.json()
                print(f"‚úÖ Produit r√©cup√©r√©: {product_data.get('name', 'N/A')}")
            else:
                print(f"‚ùå Erreur lors de la r√©cup√©ration: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Erreur lors du test de r√©cup√©ration: {e}")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests API: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_barcode_api_operations():
    """Tester les op√©rations CRUD des codes-barres via l'API"""
    print("\nüß™ Test des op√©rations CRUD des codes-barres via l'API")
    print("=" * 60)
    
    try:
        # Cr√©er les donn√©es de test
        product1, product2, test_user = create_test_data()
        
        # Configuration de base pour les requ√™tes
        base_url = "http://localhost:8000"  # Ajuster selon votre configuration
        headers = {
            'Content-Type': 'application/json',
        }
        
        # Test 1: Ajouter un code-barres via l'API
        print("\n1Ô∏è‚É£ Test CREATE - Ajouter un code-barres via l'API...")
        add_barcode_url = f"{base_url}/api/v1/products/{product1.id}/add_barcode/"
        barcode_data = {
            'ean': '1234567890123',
            'notes': 'Code-barres principal via API',
            'is_primary': True
        }
        
        try:
            response = requests.post(add_barcode_url, json=barcode_data, headers=headers, timeout=10)
            if response.status_code == 201:
                barcode_response = response.json()
                print(f"‚úÖ Code-barres ajout√© via API: {barcode_response.get('ean', 'N/A')}")
                barcode_id = barcode_response.get('id')
            else:
                print(f"‚ùå Erreur lors de l'ajout: {response.status_code}")
                print(f"   R√©ponse: {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå Erreur lors de l'ajout via API: {e}")
            return False
        
        # Test 2: Lire les codes-barres via l'API
        print("\n2Ô∏è‚É£ Test READ - Lire les codes-barres via l'API...")
        try:
            response = requests.get(f"{base_url}/api/v1/products/{product1.id}/", headers=headers, timeout=5)
            if response.status_code == 200:
                product_data = response.json()
                barcodes = product_data.get('barcodes', [])
                print(f"‚úÖ {len(barcodes)} codes-barres trouv√©s via API:")
                for barcode in barcodes:
                    print(f"   - {barcode.get('ean')} (Principal: {barcode.get('is_primary')})")
            else:
                print(f"‚ùå Erreur lors de la lecture: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Erreur lors de la lecture via API: {e}")
        
        # Test 3: Modifier un code-barres via l'API
        print("\n3Ô∏è‚É£ Test UPDATE - Modifier un code-barres via l'API...")
        if barcode_id:
            update_barcode_url = f"{base_url}/api/v1/products/{product1.id}/update_barcode/"
            update_data = {
                'barcode_id': barcode_id,
                'ean': '9876543210987',
                'notes': 'Code-barres modifi√© via API',
                'is_primary': True
            }
            
            try:
                response = requests.put(update_barcode_url, json=update_data, headers=headers, timeout=10)
                if response.status_code == 200:
                    print("‚úÖ Code-barres modifi√© via API")
                else:
                    print(f"‚ùå Erreur lors de la modification: {response.status_code}")
                    print(f"   R√©ponse: {response.text}")
            except Exception as e:
                print(f"‚ùå Erreur lors de la modification via API: {e}")
        
        # Test 4: D√©finir un code-barres principal via l'API
        print("\n4Ô∏è‚É£ Test UPDATE - D√©finir un code-barres principal via l'API...")
        if barcode_id:
            set_primary_url = f"{base_url}/api/v1/products/{product1.id}/set_primary_barcode/"
            primary_data = {
                'barcode_id': barcode_id
            }
            
            try:
                response = requests.put(set_primary_url, json=primary_data, headers=headers, timeout=10)
                if response.status_code == 200:
                    print("‚úÖ Code-barres principal d√©fini via API")
                else:
                    print(f"‚ùå Erreur lors de la d√©finition du principal: {response.status_code}")
                    print(f"   R√©ponse: {response.text}")
            except Exception as e:
                print(f"‚ùå Erreur lors de la d√©finition du principal via API: {e}")
        
        # Test 5: Supprimer un code-barres via l'API
        print("\n5Ô∏è‚É£ Test DELETE - Supprimer un code-barres via l'API...")
        if barcode_id:
            remove_barcode_url = f"{base_url}/api/v1/products/{product1.id}/remove_barcode/"
            remove_data = {
                'barcode_id': barcode_id
            }
            
            try:
                response = requests.delete(remove_barcode_url, json=remove_data, headers=headers, timeout=10)
                if response.status_code == 204:
                    print("‚úÖ Code-barres supprim√© via API")
                else:
                    print(f"‚ùå Erreur lors de la suppression: {response.status_code}")
                    print(f"   R√©ponse: {response.text}")
            except Exception as e:
                print(f"‚ùå Erreur lors de la suppression via API: {e}")
        
        print("\nüéâ Tests des op√©rations CRUD des codes-barres via l'API r√©ussis !")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests CRUD API: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_validation_api():
    """Tester la validation des codes-barres via l'API"""
    print("\nüß™ Test de validation des codes-barres via l'API")
    print("=" * 50)
    
    try:
        # Cr√©er les donn√©es de test
        product1, product2, test_user = create_test_data()
        
        # Configuration de base pour les requ√™tes
        base_url = "http://localhost:8000"  # Ajuster selon votre configuration
        headers = {
            'Content-Type': 'application/json',
        }
        
        # Test 1: Essayer d'ajouter un code-barres avec un EAN vide
        print("\n1Ô∏è‚É£ Test de validation - EAN vide...")
        add_barcode_url = f"{base_url}/api/v1/products/{product1.id}/add_barcode/"
        invalid_data = {
            'ean': '',
            'notes': 'Code-barres avec EAN vide',
            'is_primary': False
        }
        
        try:
            response = requests.post(add_barcode_url, json=invalid_data, headers=headers, timeout=10)
            if response.status_code == 400:
                print("‚úÖ Validation r√©ussie: EAN vide rejet√©")
            else:
                print(f"‚ùå Validation √©chou√©e: EAN vide accept√© (statut: {response.status_code})")
        except Exception as e:
            print(f"‚ùå Erreur lors du test de validation: {e}")
        
        # Test 2: Essayer d'ajouter un code-barres avec un EAN trop long
        print("\n2Ô∏è‚É£ Test de validation - EAN trop long...")
        long_ean = '1' * 60  # Plus de 50 caract√®res
        invalid_data = {
            'ean': long_ean,
            'notes': 'Code-barres avec EAN trop long',
            'is_primary': False
        }
        
        try:
            response = requests.post(add_barcode_url, json=invalid_data, headers=headers, timeout=10)
            if response.status_code == 400:
                print("‚úÖ Validation r√©ussie: EAN trop long rejet√©")
            else:
                print(f"‚ùå Validation √©chou√©e: EAN trop long accept√© (statut: {response.status_code})")
        except Exception as e:
            print(f"‚ùå Erreur lors du test de validation: {e}")
        
        # Test 3: Essayer d'ajouter un code-barres dupliqu√©
        print("\n3Ô∏è‚É£ Test de validation - Code-barres dupliqu√©...")
        
        # D'abord, cr√©er un code-barres valide
        valid_data = {
            'ean': '1111111111111',
            'notes': 'Premier code-barres',
            'is_primary': True
        }
        
        try:
            response = requests.post(add_barcode_url, json=valid_data, headers=headers, timeout=10)
            if response.status_code == 201:
                print("‚úÖ Premier code-barres cr√©√©")
                
                # Maintenant, essayer de cr√©er un code-barres avec le m√™me EAN
                duplicate_data = {
                    'ean': '1111111111111',
                    'notes': 'Code-barres dupliqu√©',
                    'is_primary': False
                }
                
                response = requests.post(add_barcode_url, json=duplicate_data, headers=headers, timeout=10)
                if response.status_code == 400:
                    print("‚úÖ Validation r√©ussie: Code-barres dupliqu√© rejet√©")
                else:
                    print(f"‚ùå Validation √©chou√©e: Code-barres dupliqu√© accept√© (statut: {response.status_code})")
            else:
                print(f"‚ùå Erreur lors de la cr√©ation du premier code-barres: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Erreur lors du test de validation dupliqu√©: {e}")
        
        print("\nüéâ Tests de validation via l'API r√©ussis !")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests de validation API: {e}")
        import traceback
        traceback.print_exc()
        return False

def cleanup_test_data():
    """Nettoyer les donn√©es de test"""
    print("\nüßπ Nettoyage des donn√©es de test...")
    
    try:
        # Supprimer les produits de test
        Product.objects.filter(name__icontains="Test API").delete()
        Category.objects.filter(name__icontains="Test").delete()
        Brand.objects.filter(name__icontains="Test").delete()
        Configuration.objects.filter(site_name__icontains="Test").delete()
        
        # Supprimer l'utilisateur de test
        User = get_user_model()
        User.objects.filter(username='testuser').delete()
        
        print("‚úÖ Donn√©es de test nettoy√©es")
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur lors du nettoyage: {e}")

def main():
    """Fonction principale"""
    print("üöÄ Test complet du CRUD des codes-barres via l'API frontend")
    print("=" * 70)
    
    try:
        # Test 1: V√©rifier la connectivit√© de l'API
        if not test_api_endpoints():
            print("\n‚ùå L'API n'est pas accessible. Arr√™t des tests.")
            return
        
        # Test 2: Op√©rations CRUD des codes-barres via l'API
        if not test_barcode_api_operations():
            print("\n‚ùå Les op√©rations CRUD via l'API ont √©chou√©.")
            return
        
        # Test 3: Validation des codes-barres via l'API
        if not test_validation_api():
            print("\n‚ùå Les tests de validation via l'API ont √©chou√©.")
            return
        
        print("\nüéâ Tous les tests de l'API frontend ont r√©ussi !")
        print("‚úÖ Le syst√®me de codes-barres fonctionne correctement via l'API")
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # Nettoyer les donn√©es de test
        cleanup_test_data()

if __name__ == "__main__":
    main()
