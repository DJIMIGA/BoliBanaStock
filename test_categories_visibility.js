// Script de test pour v√©rifier la visibilit√© des cat√©gories personnalis√©es
console.log('üß™ Test de visibilit√© des cat√©gories personnalis√©es');
console.log('================================================');

// Simuler les donn√©es de test
const mockCategories = [
  {
    id: 1,
    name: 'Rayon √âpicerie',
    is_rayon: true,
    rayon_type: 'epicerie',
    description: 'Rayon √©picerie du supermarch√©'
  },
  {
    id: 2,
    name: 'Rayon Frais',
    is_rayon: true,
    rayon_type: 'frais_libre_service',
    description: 'Rayon frais libre service'
  },
  {
    id: 3,
    name: 'Ma Cat√©gorie Personnalis√©e',
    is_rayon: false,
    is_global: false,
    site_configuration: 1,
    description: 'Cat√©gorie cr√©√©e par l\'utilisateur',
    created_at: '2024-01-15T10:30:00Z'
  },
  {
    id: 4,
    name: 'Cat√©gorie Globale',
    is_rayon: false,
    is_global: true,
    site_configuration: null,
    description: 'Cat√©gorie visible par tous',
    created_at: '2024-01-10T08:15:00Z'
  }
];

// Simuler l'utilisateur connect√©
const mockUser = {
  id: 1,
  username: 'testuser',
  is_staff: true
};

// Fonction de filtrage (copi√©e du code)
function filterCustomCategories(categories, user) {
  return categories.filter((cat) => {
    if (cat.is_rayon) return false; // Exclure les rayons
    
    // Filtrer les cat√©gories personnalis√©es :
    // 1. Cat√©gories globales (is_global = true) - visibles par tous
    // 2. Cat√©gories du site de l'utilisateur connect√©
    // 3. Cat√©gories sans site_configuration (cr√©√©es avant l'impl√©mentation multisite)
    if (cat.is_global === true) {
      return true; // Cat√©gories globales visibles par tous
    }
    
    // Pour les cat√©gories sp√©cifiques √† un site, v√©rifier si elles appartiennent au site de l'utilisateur
    if (user?.id && cat.site_configuration) {
      // Ici, vous devriez comparer cat.site_configuration avec le site de l'utilisateur
      // Pour l'instant, on affiche toutes les cat√©gories non-globales
      return true;
    }
    
    // Cat√©gories sans site_configuration (anciennes cat√©gories)
    return cat.site_configuration === null || cat.site_configuration === undefined;
  });
}

// Test du filtrage
console.log('üìä Donn√©es de test:');
console.log('Total cat√©gories:', mockCategories.length);
console.log('Rayons:', mockCategories.filter(cat => cat.is_rayon).length);
console.log('Cat√©gories personnalis√©es:', mockCategories.filter(cat => !cat.is_rayon).length);

const customCategories = filterCustomCategories(mockCategories, mockUser);
console.log('\nüîç R√©sultat du filtrage:');
console.log('Cat√©gories personnalis√©es trouv√©es:', customCategories.length);

if (customCategories.length > 0) {
  console.log('\nüìã D√©tails des cat√©gories personnalis√©es:');
  customCategories.forEach((cat, index) => {
    console.log(`  ${index + 1}. ${cat.name} (ID: ${cat.id}, Global: ${cat.is_global}, Site: ${cat.site_configuration})`);
  });
} else {
  console.log('‚ùå Aucune cat√©gorie personnalis√©e trouv√©e!');
}

console.log('\n‚úÖ Test termin√©');

