#!/usr/bin/env python
"""
Script de test pour v√©rifier les URLs d'images retourn√©es par l'API
Teste l'endpoint /products/ pour voir ce qui est retourn√©
"""

import requests
import json

def test_api_image_urls():
    """Test de l'API pour v√©rifier les URLs d'images"""
    print("üîç TEST API IMAGE URLS - BoliBana Stock")
    print("=" * 60)
    
    # URL de l'API Railway
    base_url = "https://web-production-e896b.up.railway.app/api/v1"
    
    try:
        print(f"üåê Test de l'API: {base_url}")
        
        # Test 1: R√©cup√©rer la liste des produits
        print("\nüìã Test 1: Liste des produits")
        print("-" * 40)
        
        response = requests.get(f"{base_url}/products/")
        if response.status_code == 200:
            data = response.json()
            products = data.get('results', [])
            print(f"‚úÖ {len(products)} produits r√©cup√©r√©s")
            
            # Analyser les premiers produits
            for i, product in enumerate(products[:3]):  # Afficher les 3 premiers
                print(f"\nüè∑Ô∏è  Produit {i+1}: {product.get('name', 'N/A')}")
                print(f"   ID: {product.get('id', 'N/A')}")
                print(f"   CUG: {product.get('cug', 'N/A')}")
                print(f"   Image: {product.get('image', 'N/A')}")
                print(f"   Image URL: {product.get('image_url', 'N/A')}")
                
                # V√©rifier si l'image_url est une URL S3
                image_url = product.get('image_url')
                if image_url:
                    if 's3.amazonaws.com' in image_url:
                        print(f"   ‚úÖ URL S3 d√©tect√©e: {image_url}")
                    elif 'railway.app' in image_url:
                        print(f"   ‚ö†Ô∏è  URL Railway locale: {image_url}")
                    else:
                        print(f"   ‚ùì URL inconnue: {image_url}")
                else:
                    print("   ‚ùå Aucune image_url")
        else:
            print(f"‚ùå Erreur API: {response.status_code}")
            print(f"   R√©ponse: {response.text}")
        
        # Test 2: R√©cup√©rer un produit sp√©cifique (si disponible)
        if products:
            first_product_id = products[0]['id']
            print(f"\nüîç Test 2: D√©tail du produit {first_product_id}")
            print("-" * 40)
            
            response = requests.get(f"{base_url}/products/{first_product_id}/")
            if response.status_code == 200:
                product = response.json()
                print(f"‚úÖ Produit r√©cup√©r√©: {product.get('name', 'N/A')}")
                print(f"   Image: {product.get('image', 'N/A')}")
                print(f"   Image URL: {product.get('image_url', 'N/A')}")
                
                # V√©rifier si l'image_url est une URL S3
                image_url = product.get('image_url')
                if image_url:
                    if 's3.amazonaws.com' in image_url:
                        print(f"   ‚úÖ URL S3 d√©tect√©e: {image_url}")
                    elif 'railway.app' in image_url:
                        print(f"   ‚ö†Ô∏è  URL Railway locale: {image_url}")
                    else:
                        print(f"   ‚ùì URL inconnue: {image_url}")
                else:
                    print("   ‚ùå Aucune image_url")
            else:
                print(f"‚ùå Erreur r√©cup√©ration produit: {response.status_code}")
        
        # Test 3: V√©rifier la configuration S3
        print(f"\nüîß Test 3: Configuration S3")
        print("-" * 40)
        
        # V√©rifier si on peut acc√©der √† une image S3
        if products:
            for product in products:
                image_url = product.get('image_url')
                if image_url and 's3.amazonaws.com' in image_url:
                    print(f"üß™ Test d'acc√®s √† l'image S3: {image_url}")
                    try:
                        img_response = requests.head(image_url)
                        if img_response.status_code == 200:
                            print(f"   ‚úÖ Image S3 accessible: {img_response.status_code}")
                        else:
                            print(f"   ‚ùå Image S3 non accessible: {img_response.status_code}")
                    except Exception as e:
                        print(f"   ‚ùå Erreur acc√®s image S3: {e}")
                    break
            else:
                print("   ‚ö†Ô∏è  Aucune image S3 trouv√©e dans les produits")
        
        print(f"\nüéØ R√âSUM√â DU TEST")
        print("=" * 60)
        
        # Analyser les r√©sultats
        s3_urls = 0
        railway_urls = 0
        no_urls = 0
        
        for product in products:
            image_url = product.get('image_url')
            if image_url:
                if 's3.amazonaws.com' in image_url:
                    s3_urls += 1
                elif 'railway.app' in image_url:
                    railway_urls += 1
                else:
                    no_urls += 1
            else:
                no_urls += 1
        
        print(f"üìä R√©sultats:")
        print(f"   ‚úÖ URLs S3: {s3_urls}")
        print(f"   ‚ö†Ô∏è  URLs Railway: {railway_urls}")
        print(f"   ‚ùå Pas d'URL: {no_urls}")
        
        if s3_urls > 0:
            print(f"\n‚úÖ L'API retourne bien des URLs S3 !")
            print(f"‚úÖ L'app mobile devrait pouvoir afficher les images")
        elif railway_urls > 0:
            print(f"\n‚ö†Ô∏è  L'API retourne des URLs Railway locales")
            print(f"‚ö†Ô∏è  Les images peuvent ne pas √™tre accessibles")
        else:
            print(f"\n‚ùå L'API ne retourne pas d'URLs d'images")
            print(f"‚ùå V√©rifiez la configuration du serializer")
        
    except Exception as e:
        print(f"‚ùå ERREUR CRITIQUE: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    import sys
    sys.exit(test_api_image_urls())
