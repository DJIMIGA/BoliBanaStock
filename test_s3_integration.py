#!/usr/bin/env python
"""
Script de test pour v√©rifier l'int√©gration S3
V√©rifie que tous les composants sont bien configur√©s
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bolibanastock.settings_railway')
django.setup()

from django.conf import settings
from django.core.files.storage import default_storage
from apps.inventory.models import Product
from api.serializers import ProductSerializer

def test_s3_configuration():
    """Test de la configuration S3"""
    print("üîß TEST CONFIGURATION S3")
    print("=" * 50)
    
    # V√©rifier les variables d'environnement
    print(f"‚úÖ AWS_ACCESS_KEY_ID: {'Configur√©' if getattr(settings, 'AWS_ACCESS_KEY_ID', None) else '‚ùå Non configur√©'}")
    print(f"‚úÖ AWS_SECRET_ACCESS_KEY: {'Configur√©' if getattr(settings, 'AWS_SECRET_ACCESS_KEY', None) else '‚ùå Non configur√©'}")
    print(f"‚úÖ AWS_STORAGE_BUCKET_NAME: {'Configur√©' if getattr(settings, 'AWS_STORAGE_BUCKET_NAME', None) else '‚ùå Non configur√©'}")
    print(f"‚úÖ AWS_S3_REGION_NAME: {'Configur√©' if getattr(settings, 'AWS_S3_REGION_NAME', None) else '‚ùå Non configur√©'}")
    
    # V√©rifier AWS_S3_ENABLED
    aws_s3_enabled = getattr(settings, 'AWS_S3_ENABLED', False)
    print(f"‚úÖ AWS_S3_ENABLED: {'‚úÖ Activ√©' if aws_s3_enabled else '‚ùå D√©sactiv√©'}")
    
    # V√©rifier le stockage par d√©faut
    default_storage_class = default_storage.__class__.__name__
    print(f"‚úÖ DEFAULT_FILE_STORAGE: {default_storage_class}")
    
    if aws_s3_enabled:
        print(f"‚úÖ Bucket S3: {settings.AWS_STORAGE_BUCKET_NAME}")
        print(f"‚úÖ URL S3: {getattr(settings, 'MEDIA_URL', 'Non configur√©')}")
    else:
        print("‚ö†Ô∏è  S3 non activ√© - stockage local utilis√©")
    
    print()

def test_storage_backend():
    """Test du backend de stockage"""
    print("üìÅ TEST BACKEND STORAGE")
    print("=" * 50)
    
    try:
        # Tester le stockage par d√©faut
        storage = default_storage
        print(f"‚úÖ Stockage par d√©faut: {storage.__class__.__name__}")
        
        # Tester la cr√©ation d'un chemin
        test_path = "test/s3_integration.txt"
        print(f"‚úÖ Test de cr√©ation de chemin: {test_path}")
        
        # Tester l'URL
        try:
            url = storage.url(test_path)
            print(f"‚úÖ URL g√©n√©r√©e: {url}")
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur g√©n√©ration URL: {e}")
            
    except Exception as e:
        print(f"‚ùå Erreur backend storage: {e}")
    
    print()

def test_product_model():
    """Test du mod√®le Product"""
    print("üè∑Ô∏è  TEST MOD√àLE PRODUCT")
    print("=" * 50)
    
    try:
        # V√©rifier le champ image
        product = Product()
        image_field = Product._meta.get_field('image')
        print(f"‚úÖ Champ image: {image_field.name}")
        print(f"‚úÖ Upload_to: {image_field.upload_to}")
        
        # V√©rifier la m√©thode save
        if hasattr(product, 'save'):
            print("‚úÖ M√©thode save() pr√©sente")
        else:
            print("‚ùå M√©thode save() manquante")
            
    except Exception as e:
        print(f"‚ùå Erreur mod√®le Product: {e}")
    
    print()

def test_serializer():
    """Test du serializer"""
    print("üì§ TEST SERIALIZER")
    print("=" * 50)
    
    try:
        # V√©rifier la m√©thode get_image_url
        serializer = ProductSerializer()
        if hasattr(serializer, 'get_image_url'):
            print("‚úÖ M√©thode get_image_url() pr√©sente")
            
            # Tester avec un objet mock
            class MockProduct:
                def __init__(self):
                    self.image = type('MockImage', (), {
                        'name': 'sites/default/products/test.jpg',
                        'url': lambda: 'sites/default/products/test.jpg'
                    })()
            
            mock_product = MockProduct()
            image_url = serializer.get_image_url(mock_product)
            
            if image_url:
                print(f"‚úÖ URL g√©n√©r√©e: {image_url}")
                if 's3.amazonaws.com' in image_url:
                    print("‚úÖ URL S3 d√©tect√©e")
                else:
                    print("‚ö†Ô∏è  URL locale g√©n√©r√©e")
            else:
                print("‚ö†Ô∏è  Aucune URL g√©n√©r√©e")
        else:
            print("‚ùå M√©thode get_image_url() manquante")
            
    except Exception as e:
        print(f"‚ùå Erreur serializer: {e}")
    
    print()

def test_railway_config():
    """Test de la configuration Railway"""
    print("üöÇ TEST CONFIGURATION RAILWAY")
    print("=" * 50)
    
    try:
        # V√©rifier que nous utilisons les bons settings
        current_settings = settings.SETTINGS_MODULE
        print(f"‚úÖ Settings utilis√©s: {current_settings}")
        
        if 'railway' in current_settings:
            print("‚úÖ Configuration Railway d√©tect√©e")
        else:
            print("‚ö†Ô∏è  Configuration locale d√©tect√©e")
            
        # V√©rifier la configuration S3
        if getattr(settings, 'AWS_S3_ENABLED', False):
            print("‚úÖ S3 activ√© dans la configuration")
            print(f"‚úÖ Bucket: {settings.AWS_STORAGE_BUCKET_NAME}")
            print(f"‚úÖ R√©gion: {getattr(settings, 'AWS_S3_REGION_NAME', 'Non configur√©')}")
        else:
            print("‚ö†Ô∏è  S3 non activ√© dans la configuration")
            
    except Exception as e:
        print(f"‚ùå Erreur configuration Railway: {e}")
    
    print()

def main():
    """Fonction principale de test"""
    print("üöÄ TEST INT√âGRATION S3 - BoliBana Stock")
    print("=" * 60)
    print()
    
    try:
        test_s3_configuration()
        test_storage_backend()
        test_product_model()
        test_serializer()
        test_railway_config()
        
        print("üéØ R√âSUM√â DES TESTS")
        print("=" * 60)
        
        # V√©rification finale
        aws_s3_enabled = getattr(settings, 'AWS_S3_ENABLED', False)
        
        if aws_s3_enabled:
            print("‚úÖ INT√âGRATION S3 PR√äTE")
            print("‚úÖ Tous les composants sont configur√©s")
            print("‚úÖ Pr√™t pour le d√©ploiement sur Railway")
            print()
            print("üöÄ PROCHAINES √âTAPES:")
            print("1. Commiter les changements")
            print("2. Pousser sur Git")
            print("3. Railway red√©ploiera automatiquement")
            print("4. Tester l'upload d'image depuis l'app mobile")
        else:
            print("‚ö†Ô∏è  CONFIGURATION S3 INCOMPL√àTE")
            print("‚ö†Ô∏è  V√©rifiez vos variables d'environnement")
            print("‚ö†Ô∏è  S3 ne sera pas utilis√©")
        
    except Exception as e:
        print(f"‚ùå ERREUR CRITIQUE: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
