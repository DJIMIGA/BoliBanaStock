#!/usr/bin/env python3
"""
Script de test simple pour les mod√®les de codes-barres
Teste la cr√©ation, modification et suppression des codes-barres
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bolibanastock.settings')
django.setup()

from app.inventory.models import Product, Category, Brand, Barcode
from app.core.models import Configuration

def test_barcode_models():
    """Tester les mod√®les de codes-barres"""
    print("üß™ Test des mod√®les de codes-barres")
    print("=" * 40)
    
    try:
        # Cr√©er ou r√©cup√©rer la configuration du site
        # D'abord, cr√©er un utilisateur de test
        from django.contrib.auth import get_user_model
        User = get_user_model()
        
        test_user, created = User.objects.get_or_create(
            username='testuser',
            defaults={
                'email': 'test@example.com',
                'first_name': 'Test',
                'last_name': 'User',
                'is_staff': True,
                'is_superuser': True
            }
        )
        
        config, created = Configuration.objects.get_or_create(
            site_name="Test Site",
            defaults={
                'devise': 'FCFA',
                'tva': 19.0,
                'nom_societe': 'Test Company',
                'adresse': 'Test Address',
                'telephone': '123456789',
                'email': 'test@example.com',
                'site_owner': test_user
            }
        )
        
        # Cr√©er ou r√©cup√©rer une cat√©gorie
        category, created = Category.objects.get_or_create(
            name="Test Category",
            defaults={'description': 'Cat√©gorie de test'}
        )
        
        # Cr√©er ou r√©cup√©rer une marque
        brand, created = Brand.objects.get_or_create(
            name="Test Brand",
            defaults={'description': 'Marque de test'}
        )
        
        # Cr√©er ou r√©cup√©rer un produit
        product, created = Product.objects.get_or_create(
            name="Produit Test Barcode",
            defaults={
                'cug': 'TESTBAR001',
                'category': category,
                'brand': brand,
                'selling_price': 1000,
                'quantity': 100,
                'is_active': True
            }
        )
        
        print(f"‚úÖ Produit cr√©√©: {product.name} (ID: {product.id})")
        
        # Test 1: Cr√©er un code-barres principal
        print("\n1Ô∏è‚É£ Test de cr√©ation d'un code-barres principal...")
        barcode1 = Barcode.objects.create(
            product=product,
            ean='1234567890123',
            is_primary=True,
            notes='Code-barres principal de test'
        )
        print(f"‚úÖ Code-barres principal cr√©√©: {barcode1.ean} (ID: {barcode1.id})")
        
        # Test 2: Cr√©er un code-barres secondaire
        print("\n2Ô∏è‚É£ Test de cr√©ation d'un code-barres secondaire...")
        barcode2 = Barcode.objects.create(
            product=product,
            ean='9876543210987',
            is_primary=False,
            notes='Code-barres secondaire de test'
        )
        print(f"‚úÖ Code-barres secondaire cr√©√©: {barcode2.ean} (ID: {barcode2.id})")
        
        # Test 3: V√©rifier la relation
        print("\n3Ô∏è‚É£ Test de la relation produit-codes-barres...")
        product_barcodes = product.barcodes.all()
        print(f"‚úÖ {product_barcodes.count()} codes-barres associ√©s au produit")
        for barcode in product_barcodes:
            print(f"   - {barcode.ean} (Principal: {barcode.is_primary})")
        
        # Test 4: Modifier un code-barres
        print("\n4Ô∏è‚É£ Test de modification d'un code-barres...")
        barcode1.ean = '1111111111111'
        barcode1.notes = 'Code-barres modifi√©'
        barcode1.save()
        print(f"‚úÖ Code-barres modifi√©: {barcode1.ean}")
        
        # Test 5: Changer le code-barres principal
        print("\n5Ô∏è‚É£ Test de changement de code-barres principal...")
        # Retirer le statut principal de tous les codes-barres
        product.barcodes.update(is_primary=False)
        
        # D√©finir le nouveau code-barres principal
        barcode2.is_primary = True
        barcode2.save()
        
        # Mettre √† jour le champ barcode principal du produit
        product.barcode = barcode2.ean
        product.save()
        
        print(f"‚úÖ Nouveau code-barres principal: {barcode2.ean}")
        print(f"‚úÖ Champ barcode du produit mis √† jour: {product.barcode}")
        
        # Test 6: V√©rifier les contraintes
        print("\n6Ô∏è‚É£ Test des contraintes...")
        try:
            # Essayer de cr√©er un code-barres avec le m√™me EAN
            duplicate_barcode = Barcode.objects.create(
                product=product,
                ean='1111111111111',
                is_primary=False,
                notes='Code-barres en double'
            )
            print("‚ö†Ô∏è Code-barres en double cr√©√© (v√©rifiez les contraintes)")
        except Exception as e:
            print(f"‚úÖ Contrainte respect√©e: {e}")
        
        # Test 7: Supprimer un code-barres
        print("\n7Ô∏è‚É£ Test de suppression d'un code-barres...")
        barcode1.delete()
        print(f"‚úÖ Code-barres supprim√©")
        
        # V√©rifier le nombre final
        final_count = product.barcodes.count()
        print(f"‚úÖ Nombre final de codes-barres: {final_count}")
        
        print("\nüéâ Tous les tests des mod√®les ont r√©ussi !")
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests: {e}")
        import traceback
        traceback.print_exc()

def cleanup_test_data():
    """Nettoyer les donn√©es de test"""
    print("\nüßπ Nettoyage des donn√©es de test...")
    
    try:
        # Supprimer les produits de test
        Product.objects.filter(name__icontains="Test Barcode").delete()
        Category.objects.filter(name__icontains="Test").delete()
        Brand.objects.filter(name__icontains="Test").delete()
        Configuration.objects.filter(site_name__icontains="Test").delete()
        
        print("‚úÖ Donn√©es de test nettoy√©es")
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur lors du nettoyage: {e}")

def main():
    """Fonction principale"""
    try:
        # Tester les mod√®les
        test_barcode_models()
        
        # Nettoyer
        cleanup_test_data()
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
