import { Alert } from 'react-native';
import { API_CONFIG, NETWORK_CONFIG } from '../config/api';

/**
 * Utilitaires pour la gestion r√©seau de l'application mobile
 */

// Test de connectivit√© r√©seau
export const testNetworkConnectivity = async (): Promise<boolean> => {
  try {
    // Test simple de connectivit√©
    const response = await fetch('https://www.google.com', {
      method: 'HEAD',
      // timeout: 5000, // timeout not supported in fetch
    });
    return response.ok;
  } catch (error) {
    console.log('‚ùå Pas de connectivit√© internet:', error);
    return false;
  }
};

// Test de connectivit√© √† l'API locale
export const testLocalAPIConnectivity = async (): Promise<{
  isConnected: boolean;
  url: string;
  responseTime: number;
  error?: string;
}> => {
  const startTime = Date.now();
  
  for (const ip of NETWORK_CONFIG.ALTERNATIVE_IPS) {
    for (const port of NETWORK_CONFIG.PORTS) {
      const testUrl = `http://${ip}:${port}/api/v1/dashboard/`;
      
      try {
        console.log(`üîç Test de connexion √†: ${testUrl}`);
        
        const response = await fetch(testUrl, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
          signal: AbortSignal.timeout(NETWORK_CONFIG.DISCOVERY_TIMEOUT),
        });
        
        const responseTime = Date.now() - startTime;
        
        if (response.status === 401) {
          // 401 = OK, l'API r√©pond mais demande une authentification
          return {
            isConnected: true,
            url: testUrl,
            responseTime,
          };
        }
        
        if (response.ok) {
          return {
            isConnected: true,
            url: testUrl,
            responseTime,
          };
        }
        
      } catch (error: any) {
        console.log(`‚ùå √âchec de connexion √† ${testUrl}:`, error.message);
        continue;
      }
    }
  }
  
  return {
    isConnected: false,
    url: '',
    responseTime: Date.now() - startTime,
    error: 'Aucune connexion API trouv√©e',
  };
};

// Diagnostic r√©seau complet
export const runNetworkDiagnostic = async (): Promise<void> => {
  console.log('üîç D√©marrage du diagnostic r√©seau...');
  
  // Test de connectivit√© internet
  const hasInternet = await testNetworkConnectivity();
  console.log(`üåê Connectivit√© internet: ${hasInternet ? '‚úÖ' : '‚ùå'}`);
  
  // Test de connectivit√© API locale
  const apiStatus = await testLocalAPIConnectivity();
  console.log(`üîå Connectivit√© API locale: ${apiStatus.isConnected ? '‚úÖ' : '‚ùå'}`);
  
  if (apiStatus.isConnected) {
    console.log(`üì° API accessible sur: ${apiStatus.url}`);
    console.log(`‚è±Ô∏è Temps de r√©ponse: ${apiStatus.responseTime}ms`);
  }
  
  // Affichage des informations de diagnostic
  let diagnosticMessage = 'üîç Diagnostic R√©seau:\n\n';
  diagnosticMessage += `üåê Internet: ${hasInternet ? 'Connect√©' : 'Non connect√©'}\n`;
  diagnosticMessage += `üîå API Locale: ${apiStatus.isConnected ? 'Accessible' : 'Non accessible'}\n`;
  
  if (apiStatus.isConnected) {
    diagnosticMessage += `üì° URL: ${apiStatus.url}\n`;
    diagnosticMessage += `‚è±Ô∏è R√©ponse: ${apiStatus.responseTime}ms\n`;
  } else {
    diagnosticMessage += `‚ùå Erreur: ${apiStatus.error}\n`;
    diagnosticMessage += `üí° V√©rifiez que le serveur Django tourne sur 192.168.1.7:8000\n`;
  }
  
  Alert.alert('Diagnostic R√©seau', diagnosticMessage);
};

// V√©rification de la configuration r√©seau
export const checkNetworkConfiguration = (): {
  isValid: boolean;
  issues: string[];
  recommendations: string[];
} => {
  const issues: string[] = [];
  const recommendations: string[] = [];
  
  // V√©rifier que l'IP locale est configur√©e
  if (!API_CONFIG.BASE_URL.includes('192.168.1.7')) {
    issues.push('IP locale non configur√©e');
    recommendations.push('Mettre √† jour la configuration API avec 192.168.1.7:8000');
  }
  
  // V√©rifier le timeout
  if (API_CONFIG.TIMEOUT < 10000) {
    issues.push('Timeout trop court');
    recommendations.push('Augmenter le timeout √† au moins 10000ms');
  }
  
  return {
    isValid: issues.length === 0,
    issues,
    recommendations,
  };
};

// Fonction pour obtenir l'URL API optimale
export const getOptimalAPIUrl = async (): Promise<string> => {
  const apiStatus = await testLocalAPIConnectivity();
  
  if (apiStatus.isConnected) {
    return apiStatus.url.replace('/api/v1/dashboard/', '/api/v1');
  }
  
  // Fallback vers la configuration par d√©faut
  return API_CONFIG.BASE_URL;
};

// Fonction pour afficher les informations de d√©bogage r√©seau
export const showNetworkDebugInfo = (): void => {
  const config = checkNetworkConfiguration();
  
  let debugInfo = 'üîß Configuration R√©seau:\n\n';
  debugInfo += `üì° URL de base: ${API_CONFIG.BASE_URL}\n`;
  debugInfo += `‚è±Ô∏è Timeout: ${API_CONFIG.TIMEOUT}ms\n`;
  debugInfo += `üåç Environnement: ${__DEV__ ? 'D√©veloppement' : 'Production'}\n\n`;
  
  if (config.isValid) {
    debugInfo += '‚úÖ Configuration valide';
  } else {
    debugInfo += '‚ùå Probl√®mes d√©tect√©s:\n';
    config.issues.forEach(issue => {
      debugInfo += `‚Ä¢ ${issue}\n`;
    });
    debugInfo += '\nüí° Recommandations:\n';
    config.recommendations.forEach(rec => {
      debugInfo += `‚Ä¢ ${rec}\n`;
    });
  }
  
  Alert.alert('Debug R√©seau', debugInfo);
};
