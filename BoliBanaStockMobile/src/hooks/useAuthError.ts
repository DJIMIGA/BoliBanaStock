import { useEffect, useState } from 'react';
import { useDispatch } from 'react-redux';
import { logout } from '../store/slices/authSlice';
import { setSessionExpiredCallback } from '../services/api';
import { AppDispatch } from '../store';

/**
 * Hook pour g√©rer automatiquement les erreurs d'authentification
 * Enregistre le callback de d√©connexion automatique et g√®re la d√©connexion
 */
export const useAuthError = () => {
  const dispatch = useDispatch<AppDispatch>();
  const [showNotification, setShowNotification] = useState(false);

  useEffect(() => {
    // Enregistrer le callback de d√©connexion automatique
    setSessionExpiredCallback(() => {
      console.log('üîÑ Session expir√©e d√©tect√©e - d√©connexion automatique via hook...');
      
      // Afficher la notification avant la d√©connexion
      setShowNotification(true);
      
      // D√©lai pour laisser le temps √† la notification de s'afficher
      setTimeout(() => {
        dispatch(logout());
      }, 1500);
    });

    // Cleanup function
    return () => {
      setSessionExpiredCallback(() => {});
    };
  }, [dispatch]);

  /**
   * Fonction pour g√©rer les erreurs d'API et v√©rifier si c'est une erreur d'authentification
   */
  const handleApiError = (error: any) => {
    if (error.message === 'Session expir√©e. Veuillez vous reconnecter.') {
      console.log('üîë Erreur d\'authentification d√©tect√©e dans le composant');
      // La d√©connexion sera g√©r√©e automatiquement par l'intercepteur
      return true; // Indique que c'est une erreur d'authentification
    }
    return false; // Indique que ce n'est pas une erreur d'authentification
  };

  return { handleApiError, showNotification, setShowNotification };
};
