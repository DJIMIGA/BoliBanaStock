#!/usr/bin/env python3
"""
Script de test pour v√©rifier la redirection automatique apr√®s expiration de session
"""

import requests
import json
import time

# Configuration
API_BASE_URL = "https://web-production-e896b.up.railway.app/api/v1"
TEST_USERNAME = "admin2"
TEST_PASSWORD = "admin123"

def test_session_expired_redirect():
    """Test de la redirection automatique apr√®s expiration de session"""
    
    print("üß™ Test de redirection automatique apr√®s expiration de session")
    print("=" * 60)
    
    # 1. Connexion initiale
    print("1. Connexion initiale...")
    login_data = {
        "username": TEST_USERNAME,
        "password": TEST_PASSWORD
    }
    
    try:
        response = requests.post(f"{API_BASE_URL}/auth/login/", json=login_data)
        print(f"Status code: {response.status_code}")
        print(f"Response: {response.text[:200]}...")
        
        if response.status_code == 200:
            auth_data = response.json()
            # L'API retourne 'access_token' au lieu de 'access'
            access_token = auth_data.get('access_token') or auth_data.get('access')
            if access_token:
                print(f"‚úÖ Connexion r√©ussie - Token: {access_token[:20]}...")
            else:
                print(f"‚ùå Token d'acc√®s manquant dans la r√©ponse")
                print(f"Cl√©s disponibles: {list(auth_data.keys())}")
                return False
        else:
            print(f"‚ùå √âchec de la connexion: {response.status_code}")
            print(f"R√©ponse: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False
    
    # 2. Test d'une requ√™te avec token valide
    print("\n2. Test d'une requ√™te avec token valide...")
    headers = {"Authorization": f"Bearer {access_token}"}
    
    try:
        response = requests.get(f"{API_BASE_URL}/products/", headers=headers)
        if response.status_code == 200:
            print("‚úÖ Requ√™te avec token valide r√©ussie")
        else:
            print(f"‚ùå √âchec de la requ√™te: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur de requ√™te: {e}")
    
    # 3. Simulation d'expiration de session (token invalide)
    print("\n3. Simulation d'expiration de session...")
    invalid_token = "invalid_token_for_testing"
    headers_invalid = {"Authorization": f"Bearer {invalid_token}"}
    
    try:
        response = requests.get(f"{API_BASE_URL}/products/", headers=headers_invalid)
        if response.status_code == 401:
            print("‚úÖ Token invalide correctement rejet√© (401)")
            print("   ‚Üí L'application mobile devrait d√©tecter cette erreur")
            print("   ‚Üí Et d√©clencher la redirection automatique vers LoginScreen")
        else:
            print(f"‚ùå R√©ponse inattendue: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur de requ√™te avec token invalide: {e}")
    
    # 4. Test de d√©connexion
    print("\n4. Test de d√©connexion...")
    try:
        response = requests.post(f"{API_BASE_URL}/auth/logout/", headers=headers)
        if response.status_code in [200, 204]:
            print("‚úÖ D√©connexion r√©ussie")
        else:
            print(f"‚ö†Ô∏è  D√©connexion: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur de d√©connexion: {e}")
    
    print("\n" + "=" * 60)
    print("üì± Instructions pour tester sur l'application mobile:")
    print("1. Connectez-vous √† l'application")
    print("2. Attendez que le token expire ou forcez l'expiration")
    print("3. Effectuez une action qui n√©cessite l'authentification")
    print("4. V√©rifiez que la notification 'Session expir√©e' s'affiche")
    print("5. V√©rifiez que la redirection vers LoginScreen se fait automatiquement")
    print("6. V√©rifiez que l'utilisateur est d√©connect√©")
    
    return True

if __name__ == "__main__":
    test_session_expired_redirect()
