#!/usr/bin/env node

/**
 * Script de test pour v√©rifier la configuration du scanner de codes-barres
 * Usage: node test-scanner-config.js
 */

const fs = require('fs');
const path = require('path');

console.log('üì± Test de configuration du scanner de codes-barres...\n');

// V√©rification des packages install√©s
console.log('üì¶ V√©rification des packages install√©s:');
const requiredPackages = [
  'expo-barcode-scanner',
  'expo-camera',
  'react-native-reanimated'
];

requiredPackages.forEach(pkg => {
  const pkgPath = path.join(__dirname, 'node_modules', pkg);
  if (fs.existsSync(pkgPath)) {
    console.log(`‚úÖ ${pkg} - Pr√©sent`);
    
    // V√©rifier le package.json
    const pkgJsonPath = path.join(pkgPath, 'package.json');
    if (fs.existsSync(pkgJsonPath)) {
      try {
        const pkgJson = JSON.parse(fs.readFileSync(pkgJsonPath, 'utf8'));
        console.log(`   üìÑ Version: ${pkgJson.version}`);
        console.log(`   üìÑ Main: ${pkgJson.main || 'Non d√©fini'}`);
        
        if (pkg === 'expo-barcode-scanner') {
          console.log(`   üìÑ Type: ${pkgJson.type || 'Non d√©fini'}`);
          if (pkgJson.expo) {
            console.log(`   üìÑ Expo Plugin: ${pkgJson.expo.plugin || 'Non d√©fini'}`);
          }
        }
      } catch (error) {
        console.log(`   ‚ùå Erreur lecture package.json: ${error.message}`);
      }
    }
  } else {
    console.log(`‚ùå ${pkg} - Manquant`);
  }
});

// V√©rification de la configuration app.json
console.log('\nüì± V√©rification de app.json:');
const appJsonPath = path.join(__dirname, 'app.json');
if (fs.existsSync(appJsonPath)) {
  try {
    const appJson = JSON.parse(fs.readFileSync(appJsonPath, 'utf8'));
    const plugins = appJson.expo?.plugins || [];
    
    if (plugins.includes('expo-barcode-scanner')) {
      console.log(`‚úÖ expo-barcode-scanner - Plugin configur√©`);
    } else {
      console.log(`‚ùå expo-barcode-scanner - Plugin manquant`);
    }
    
    if (plugins.includes('expo-camera')) {
      console.log(`‚úÖ expo-camera - Plugin configur√©`);
    } else {
      console.log(`‚ùå expo-camera - Plugin manquant`);
    }
    
    // V√©rifier les permissions iOS
    const iosPermissions = appJson.expo?.ios?.infoPlist;
    if (iosPermissions?.NSCameraUsageDescription) {
      console.log(`‚úÖ NSCameraUsageDescription - Configur√©`);
    } else {
      console.log(`‚ùå NSCameraUsageDescription - Manquant`);
    }
    
    // V√©rifier les permissions Android
    const androidPermissions = appJson.expo?.android?.permissions;
    if (androidPermissions && androidPermissions.includes('CAMERA')) {
      console.log(`‚úÖ Permission CAMERA Android - Configur√©e`);
    } else {
      console.log(`‚ùå Permission CAMERA Android - Manquante`);
    }
  } catch (error) {
    console.log(`‚ùå Erreur lecture app.json: ${error.message}`);
  }
} else {
  console.log(`‚ùå app.json - Manquant`);
}

// V√©rification de la configuration Metro
console.log('\nüöá V√©rification de metro.config.js:');
const metroConfigPath = path.join(__dirname, 'metro.config.js');
if (fs.existsSync(metroConfigPath)) {
  try {
    const metroConfig = fs.readFileSync(metroConfigPath, 'utf8');
    
    if (metroConfig.includes('expo-barcode-scanner')) {
      console.log(`‚úÖ expo-barcode-scanner - Alias Metro configur√©`);
    } else {
      console.log(`‚ùå expo-barcode-scanner - Alias Metro manquant`);
    }
    
    if (metroConfig.includes('expo-camera')) {
      console.log(`‚úÖ expo-camera - Alias Metro configur√©`);
    } else {
      console.log(`‚ùå expo-camera - Alias Metro manquant`);
    }
    
    if (metroConfig.includes('react-native-reanimated')) {
      console.log(`‚úÖ react-native-reanimated - Alias Metro configur√©`);
    } else {
      console.log(`‚ùå react-native-reanimated - Alias Metro manquant`);
    }
  } catch (error) {
    console.log(`‚ùå Erreur lecture metro.config.js: ${error.message}`);
  }
} else {
  console.log(`‚ùå metro.config.js - Manquant`);
}

// V√©rification de la configuration Babel
console.log('\n‚öôÔ∏è  V√©rification de babel.config.js:');
const babelConfigPath = path.join(__dirname, 'babel.config.js');
if (fs.existsSync(babelConfigPath)) {
  try {
    const babelConfig = fs.readFileSync(babelConfigPath, 'utf8');
    
    if (babelConfig.includes('react-native-reanimated/plugin')) {
      console.log(`‚úÖ react-native-reanimated/plugin - Configur√©`);
    } else {
      console.log(`‚ùå react-native-reanimated/plugin - Manquant`);
    }
    
    if (babelConfig.includes('babel-preset-expo')) {
      console.log(`‚úÖ babel-preset-expo - Configur√©`);
    } else {
      console.log(`‚ùå babel-preset-expo - Manquant`);
    }
  } catch (error) {
    console.log(`‚ùå Erreur lecture babel.config.js: ${error.message}`);
  }
} else {
  console.log(`‚ùå babel.config.js - Manquant`);
}

// V√©rification du composant BarcodeScanner
console.log('\nüîç V√©rification du composant BarcodeScanner:');
const scannerPath = path.join(__dirname, 'src', 'components', 'BarcodeScanner.tsx');
if (fs.existsSync(scannerPath)) {
  console.log(`‚úÖ BarcodeScanner.tsx - Pr√©sent`);
  
  try {
    const scannerContent = fs.readFileSync(scannerPath, 'utf8');
    
    if (scannerContent.includes("import { BarCodeScanner } from 'expo-barcode-scanner'")) {
      console.log(`‚úÖ Import BarCodeScanner - Correct`);
    } else {
      console.log(`‚ùå Import BarCodeScanner - Incorrect`);
    }
    
    if (scannerContent.includes('BarCodeScanner.requestPermissionsAsync')) {
      console.log(`‚úÖ Permissions - Configur√©es`);
    } else {
      console.log(`‚ùå Permissions - Manquantes`);
    }
    
    if (scannerContent.includes('handleBarCodeScanned')) {
      console.log(`‚úÖ Gestion des scans - Configur√©e`);
    } else {
      console.log(`‚ùå Gestion des scans - Manquante`);
    }
  } catch (error) {
    console.log(`‚ùå Erreur lecture BarcodeScanner.tsx: ${error.message}`);
  }
} else {
  console.log(`‚ùå BarcodeScanner.tsx - Manquant`);
}

// Test de r√©solution des modules
console.log('\nüß™ Test de r√©solution des modules:');
try {
  const barcodeScanner = require('expo-barcode-scanner');
  console.log(`‚úÖ require('expo-barcode-scanner') - Succ√®s`);
  console.log(`   üìÑ Type: ${typeof barcodeScanner}`);
  console.log(`   üìÑ BarCodeScanner: ${typeof barcodeScanner.BarCodeScanner}`);
} catch (error) {
  console.log(`‚ùå require('expo-barcode-scanner') - √âchec: ${error.message}`);
}

try {
  const camera = require('expo-camera');
  console.log(`‚úÖ require('expo-camera') - Succ√®s`);
  console.log(`   üìÑ Type: ${typeof camera}`);
} catch (error) {
  console.log(`‚ùå require('expo-camera') - √âchec: ${error.message}`);
}

try {
  const reanimated = require('react-native-reanimated');
  console.log(`‚úÖ require('react-native-reanimated') - Succ√®s`);
  console.log(`   üìÑ Type: ${typeof reanimated}`);
} catch (error) {
  console.log(`‚ùå require('react-native-reanimated') - √âchec: ${error.message}`);
}

// R√©sum√© et recommandations
console.log('\nüéØ R√©sum√© des tests:');
console.log('Si tous les √©l√©ments sont marqu√©s ‚úÖ, le scanner devrait fonctionner.');

console.log('\nüöÄ Pour tester le scanner:');
console.log('1. npx expo start --clear');
console.log('2. V√©rifier qu\'il n\'y a plus d\'erreurs de module natif');
console.log('3. Tester le scanner dans l\'app');

console.log('\nüõ°Ô∏è En cas de probl√®me:');
console.log('- V√©rifier que tous les packages sont install√©s');
console.log('- V√©rifier la configuration Metro et Babel');
console.log('- Nettoyer le cache: npx expo start --clear');
console.log('- R√©installer les d√©pendances si n√©cessaire');

console.log('\nüìö Documentation:');
console.log('- Expo Barcode Scanner: https://docs.expo.dev/versions/latest/sdk/bar-code-scanner/');
console.log('- Expo Camera: https://docs.expo.dev/versions/latest/sdk/camera/');
console.log('- React Native Reanimated: https://docs.swmansion.com/react-native-reanimated/');
