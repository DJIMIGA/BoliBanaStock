#!/usr/bin/env python3
"""
Script de test pour v√©rifier que la redirection de session expir√©e fonctionne correctement
apr√®s la correction de l'erreur NavigationContainer
"""

import requests
import json
import time
from datetime import datetime

# Configuration
API_BASE_URL = "https://bolibanastock-production.up.railway.app"
# API_BASE_URL = "http://localhost:8000"  # Pour test local

def test_session_expired_redirection():
    """Test de la redirection automatique lors d'expiration de session"""
    
    print("üß™ Test de redirection automatique - Session expir√©e")
    print("=" * 60)
    
    # 1. Test de connexion avec des credentials valides
    print("\n1Ô∏è‚É£ Test de connexion initiale...")
    
    login_data = {
        "username": "admin2025",
        "password": "admin2025"
    }
    
    try:
        response = requests.post(f"{API_BASE_URL}/api/auth/login/", json=login_data)
        
        if response.status_code == 200:
            print("‚úÖ Connexion r√©ussie")
            auth_data = response.json()
            access_token = auth_data.get('access')
            print(f"üîë Token d'acc√®s obtenu: {access_token[:20]}...")
        else:
            print(f"‚ùå √âchec de la connexion: {response.status_code}")
            print(f"R√©ponse: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False
    
    # 2. Test d'acc√®s √† une ressource prot√©g√©e avec token valide
    print("\n2Ô∏è‚É£ Test d'acc√®s √† une ressource prot√©g√©e...")
    
    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json"
    }
    
    try:
        response = requests.get(f"{API_BASE_URL}/api/products/", headers=headers)
        
        if response.status_code == 200:
            print("‚úÖ Acc√®s aux produits r√©ussi")
            products = response.json()
            print(f"üì¶ {len(products)} produits trouv√©s")
        else:
            print(f"‚ùå √âchec d'acc√®s aux produits: {response.status_code}")
            print(f"R√©ponse: {response.text}")
            
    except Exception as e:
        print(f"‚ùå Erreur d'acc√®s aux produits: {e}")
    
    # 3. Test avec token invalide (simulation d'expiration)
    print("\n3Ô∏è‚É£ Test avec token invalide (simulation d'expiration)...")
    
    invalid_headers = {
        "Authorization": "Bearer invalid_token_12345",
        "Content-Type": "application/json"
    }
    
    try:
        response = requests.get(f"{API_BASE_URL}/api/products/", headers=invalid_headers)
        
        if response.status_code == 401:
            print("‚úÖ Erreur 401 d√©tect√©e (token invalide)")
            print("üîî L'application mobile devrait maintenant afficher la notification de session expir√©e")
            print("üîÑ Et rediriger automatiquement vers la page de connexion")
        else:
            print(f"‚ö†Ô∏è Statut inattendu: {response.status_code}")
            print(f"R√©ponse: {response.text}")
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test avec token invalide: {e}")
    
    # 4. Test de d√©connexion
    print("\n4Ô∏è‚É£ Test de d√©connexion...")
    
    try:
        response = requests.post(f"{API_BASE_URL}/api/auth/logout/", headers=headers)
        
        if response.status_code in [200, 204]:
            print("‚úÖ D√©connexion r√©ussie")
        else:
            print(f"‚ö†Ô∏è Statut de d√©connexion: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erreur de d√©connexion: {e}")
    
    print("\n" + "=" * 60)
    print("üéØ R√©sum√© du test:")
    print("‚úÖ La correction a √©t√© appliqu√©e:")
    print("   - GlobalSessionNotification d√©plac√© dans NavigationContainer")
    print("   - SessionExpiredNotification peut maintenant utiliser useNavigation()")
    print("   - La redirection automatique devrait fonctionner")
    print("\nüì± Pour tester sur l'application mobile:")
    print("   1. Connectez-vous √† l'application")
    print("   2. Attendez l'expiration du token ou forcez une erreur 401")
    print("   3. V√©rifiez que la notification s'affiche")
    print("   4. V√©rifiez que la redirection vers Login se fait automatiquement")
    
    return True

def test_api_connectivity():
    """Test de connectivit√© API"""
    print("\nüåê Test de connectivit√© API...")
    
    try:
        response = requests.get(f"{API_BASE_URL}/api/products/", timeout=10)
        if response.status_code == 200:
            print("‚úÖ API accessible")
            return True
        else:
            print(f"‚ö†Ô∏è API r√©pond avec le statut: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå API non accessible: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Test de correction - Redirection Session Expir√©e")
    print(f"‚è∞ Heure: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê API: {API_BASE_URL}")
    
    # Test de connectivit√©
    if test_api_connectivity():
        # Test principal
        test_session_expired_redirection()
    else:
        print("\n‚ùå Impossible de continuer - API non accessible")
