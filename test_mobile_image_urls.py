#!/usr/bin/env python3
"""
Script de test pour v√©rifier que les URLs d'images c√¥t√© mobile utilisent la nouvelle structure S3
Teste les s√©rialiseurs API et la g√©n√©ration des URLs
"""

import os
import sys
import django
from pathlib import Path
import logging

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Ajouter le r√©pertoire racine au path Python
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bolibanastock.settings_railway')
django.setup()

from django.conf import settings
from django.test import RequestFactory
from apps.inventory.models import Product, Category, Brand
from apps.core.models import Configuration
from api.serializers import ProductSerializer, ProductListSerializer

class MobileImageUrlTester:
    """Classe pour tester les URLs d'images c√¥t√© mobile"""
    
    def __init__(self):
        self.factory = RequestFactory()
        self.test_results = []
        
    def test_product_serializer_image_urls(self):
        """Teste les URLs d'images dans ProductSerializer"""
        logger.info("üîç Test des URLs d'images dans ProductSerializer...")
        
        try:
            # Cr√©er une requ√™te factice
            request = self.factory.get('/api/products/')
            
            # R√©cup√©rer un produit existant
            products = Product.objects.all()[:3]
            
            if not products:
                logger.warning("‚ö†Ô∏è Aucun produit trouv√© pour le test")
                return
            
            for product in products:
                try:
                    # Cr√©er le contexte avec la requ√™te
                    context = {'request': request}
                    
                    # S√©rialiser le produit
                    serializer = ProductSerializer(product, context=context)
                    data = serializer.data
                    
                    # V√©rifier l'URL de l'image
                    image_url = data.get('image_url')
                    
                    if image_url:
                        # V√©rifier la structure de l'URL
                        if 'assets/products/site-' in image_url:
                            status = "‚úÖ"
                            result = "URL utilise la nouvelle structure S3"
                        elif 's3.amazonaws.com' in image_url:
                            status = "‚ö†Ô∏è"
                            result = "URL S3 mais structure ancienne"
                        else:
                            status = "‚ùå"
                            result = "URL locale ou invalide"
                        
                        logger.info(f"{status} Produit {product.id}: {image_url}")
                        logger.info(f"   {result}")
                        
                        self.test_results.append({
                            'product_id': product.id,
                            'image_url': image_url,
                            'status': status,
                            'result': result
                        })
                    else:
                        logger.info(f"‚ÑπÔ∏è Produit {product.id}: Pas d'image")
                        
                except Exception as e:
                    logger.error(f"‚ùå Erreur lors du test du produit {product.id}: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du test ProductSerializer: {e}")
    
    def test_product_list_serializer_image_urls(self):
        """Teste les URLs d'images dans ProductListSerializer"""
        logger.info("üîç Test des URLs d'images dans ProductListSerializer...")
        
        try:
            # Cr√©er une requ√™te factice
            request = self.factory.get('/api/products/')
            
            # R√©cup√©rer un produit existant
            products = Product.objects.all()[:3]
            
            if not products:
                logger.warning("‚ö†Ô∏è Aucun produit trouv√© pour le test")
                return
            
            for product in products:
                try:
                    # Cr√©er le contexte avec la requ√™te
                    context = {'request': request}
                    
                    # S√©rialiser le produit
                    serializer = ProductListSerializer(product, context=context)
                    data = serializer.data
                    
                    # V√©rifier l'URL de l'image
                    image_url = data.get('image_url')
                    
                    if image_url:
                        # V√©rifier la structure de l'URL
                        if 'assets/products/site-' in image_url:
                            status = "‚úÖ"
                            result = "URL utilise la nouvelle structure S3"
                        elif 's3.amazonaws.com' in image_url:
                            status = "‚ö†Ô∏è"
                            result = "URL S3 mais structure ancienne"
                        else:
                            status = "‚ùå"
                            result = "URL locale ou invalide"
                        
                        logger.info(f"{status} Produit {product.id}: {image_url}")
                        logger.info(f"   {result}")
                        
                        self.test_results.append({
                            'product_id': product.id,
                            'image_url': image_url,
                            'status': status,
                            'result': result,
                            'serializer': 'ProductListSerializer'
                        })
                    else:
                        logger.info(f"‚ÑπÔ∏è Produit {product.id}: Pas d'image")
                        
                except Exception as e:
                    logger.error(f"‚ùå Erreur lors du test du produit {product.id}: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du test ProductListSerializer: {e}")
    
    def test_s3_configuration(self):
        """Teste la configuration S3"""
        logger.info("üîç Test de la configuration S3...")
        
        try:
            # V√©rifier les param√®tres S3
            s3_enabled = getattr(settings, 'AWS_S3_ENABLED', False)
            bucket_name = getattr(settings, 'AWS_STORAGE_BUCKET_NAME', None)
            media_url = getattr(settings, 'MEDIA_URL', None)
            
            logger.info(f"‚úÖ AWS_S3_ENABLED: {s3_enabled}")
            logger.info(f"‚úÖ AWS_STORAGE_BUCKET_NAME: {bucket_name}")
            logger.info(f"‚úÖ MEDIA_URL: {media_url}")
            
            # V√©rifier la structure de MEDIA_URL
            if media_url and 'assets' in media_url:
                logger.info("‚úÖ MEDIA_URL utilise la nouvelle structure 'assets'")
            elif media_url:
                logger.warning(f"‚ö†Ô∏è MEDIA_URL n'utilise pas la nouvelle structure: {media_url}")
            else:
                logger.warning("‚ö†Ô∏è MEDIA_URL non configur√©")
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du test de configuration S3: {e}")
    
    def test_model_image_paths(self):
        """Teste les chemins d'images dans les mod√®les"""
        logger.info("üîç Test des chemins d'images dans les mod√®les...")
        
        try:
            # V√©rifier un produit avec image
            products_with_images = Product.objects.filter(image__isnull=False)[:3]
            
            if not products_with_images:
                logger.info("‚ÑπÔ∏è Aucun produit avec image trouv√©")
                return
            
            for product in products_with_images:
                try:
                    image_path = product.image.name
                    
                    if image_path:
                        # V√©rifier la structure du chemin
                        if image_path.startswith('assets/products/site-'):
                            status = "‚úÖ"
                            result = "Chemin utilise la nouvelle structure S3"
                        elif image_path.startswith('sites/'):
                            status = "‚ùå"
                            result = "Chemin utilise l'ancienne structure"
                        else:
                            status = "‚ö†Ô∏è"
                            result = "Chemin inattendu"
                        
                        logger.info(f"{status} Produit {product.id}: {image_path}")
                        logger.info(f"   {result}")
                        
                except Exception as e:
                    logger.error(f"‚ùå Erreur lors du test du chemin du produit {product.id}: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du test des chemins de mod√®les: {e}")
    
    def run_tests(self):
        """Ex√©cute tous les tests"""
        logger.info("üöÄ D√©but des tests des URLs d'images c√¥t√© mobile...")
        
        try:
            # Tests
            self.test_s3_configuration()
            self.test_model_image_paths()
            self.test_product_serializer_image_urls()
            self.test_product_list_serializer_image_urls()
            
            # R√©sum√©
            self.print_summary()
            
            logger.info("üéâ Tests termin√©s!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Tests √©chou√©s: {e}")
            return False
    
    def print_summary(self):
        """Affiche un r√©sum√© des tests"""
        logger.info("\nüìä R√âSUM√â DES TESTS")
        logger.info("=" * 50)
        
        if not self.test_results:
            logger.info("‚ÑπÔ∏è Aucun test d'URL effectu√©")
            return
        
        # Compter les r√©sultats
        success_count = sum(1 for r in self.test_results if r['status'] == '‚úÖ')
        warning_count = sum(1 for r in self.test_results if r['status'] == '‚ö†Ô∏è')
        error_count = sum(1 for r in self.test_results if r['status'] == '‚ùå')
        
        logger.info(f"‚úÖ Succ√®s: {success_count}")
        logger.info(f"‚ö†Ô∏è Avertissements: {warning_count}")
        logger.info(f"‚ùå Erreurs: {error_count}")
        
        # Afficher les probl√®mes d√©tect√©s
        if warning_count > 0 or error_count > 0:
            logger.info("\nüö® PROBL√àMES D√âTECT√âS:")
            for result in self.test_results:
                if result['status'] in ['‚ö†Ô∏è', '‚ùå']:
                    logger.info(f"   {result['status']} Produit {result['product_id']}: {result['result']}")
        
        # Recommandations
        logger.info("\nüí° RECOMMANDATIONS:")
        if error_count > 0:
            logger.info("   - Corriger les chemins d'images dans la base de donn√©es")
            logger.info("   - Ex√©cuter: python fix_model_upload_paths.py")
        if warning_count > 0:
            logger.info("   - V√©rifier la configuration S3")
            logger.info("   - S'assurer que MEDIA_URL utilise la structure 'assets'")
        if success_count == len(self.test_results):
            logger.info("   - Toutes les URLs utilisent la nouvelle structure S3 ‚úÖ")

def main():
    """Fonction principale"""
    try:
        print("üß™ Test des URLs d'images c√¥t√© mobile - Nouvelle Structure S3")
        print("=" * 70)
        
        tester = MobileImageUrlTester()
        success = tester.run_tests()
        
        if success:
            print("\n‚úÖ Tests termin√©s avec succ√®s!")
        else:
            print("\n‚ùå Tests √©chou√©s")
            sys.exit(1)
        
    except Exception as e:
        logger.error(f"‚ùå Tests √©chou√©s: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
