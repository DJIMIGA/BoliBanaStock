#!/usr/bin/env python3
"""
Script de diagnostic pour les erreurs 404 sur Railway
"""

import os
import sys
import django
from pathlib import Path

# Ajouter le r√©pertoire du projet au path
BASE_DIR = Path(__file__).resolve().parent
sys.path.insert(0, str(BASE_DIR))

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bolibanastock.settings')

try:
    django.setup()
except Exception as e:
    print(f"‚ùå Erreur lors de l'initialisation Django: {e}")
    sys.exit(1)

from django.conf import settings
from django.urls import get_resolver
from django.core.management import execute_from_command_line

def check_django_setup():
    """V√©rifier la configuration Django"""
    print("üîç V√©rification de la configuration Django...")
    
    # V√©rifier les variables d'environnement critiques
    critical_vars = [
        'DJANGO_SECRET_KEY',
        'DJANGO_DEBUG',
        'RAILWAY_HOST',
        'ALLOWED_HOSTS',
    ]
    
    for var in critical_vars:
        value = os.getenv(var, 'Non d√©fini')
        print(f"  {var}: {value}")
    
    # V√©rifier la configuration Django
    print(f"\nüìã Configuration Django:")
    print(f"  DEBUG: {settings.DEBUG}")
    print(f"  ALLOWED_HOSTS: {settings.ALLOWED_HOSTS}")
    print(f"  CORS_ALLOW_ALL_ORIGINS: {getattr(settings, 'CORS_ALLOW_ALL_ORIGINS', 'Non d√©fini')}")
    print(f"  CORS_ALLOWED_ORIGINS: {getattr(settings, 'CORS_ALLOWED_ORIGINS', [])}")
    
    return True

def check_urls():
    """V√©rifier la configuration des URLs"""
    print("\nüîó V√©rification des URLs...")
    
    try:
        resolver = get_resolver()
        url_patterns = resolver.url_patterns
        
        print("  URLs principales configur√©es:")
        for pattern in url_patterns:
            if hasattr(pattern, 'pattern'):
                print(f"    - {pattern.pattern}")
        
        # V√©rifier les URLs API sp√©cifiquement
        api_urls = []
        for pattern in url_patterns:
            if hasattr(pattern, 'url_patterns'):
                for sub_pattern in pattern.url_patterns:
                    if 'api' in str(sub_pattern.pattern):
                        api_urls.append(sub_pattern.pattern)
        
        if api_urls:
            print(f"  URLs API trouv√©es: {api_urls}")
        else:
            print("  ‚ö†Ô∏è  Aucune URL API trouv√©e!")
            
    except Exception as e:
        print(f"  ‚ùå Erreur lors de la v√©rification des URLs: {e}")
        return False
    
    return True

def check_static_files():
    """V√©rifier la configuration des fichiers statiques"""
    print("\nüìÅ V√©rification des fichiers statiques...")
    
    print(f"  STATIC_URL: {settings.STATIC_URL}")
    print(f"  STATIC_ROOT: {settings.STATIC_ROOT}")
    print(f"  STATICFILES_DIRS: {settings.STATICFILES_DIRS}")
    
    # V√©rifier si le r√©pertoire static existe
    static_dir = BASE_DIR / 'static'
    if static_dir.exists():
        print(f"  ‚úÖ R√©pertoire static trouv√©: {static_dir}")
    else:
        print(f"  ‚ö†Ô∏è  R√©pertoire static manquant: {static_dir}")
    
    return True

def check_database():
    """V√©rifier la configuration de la base de donn√©es"""
    print("\nüóÑÔ∏è  V√©rification de la base de donn√©es...")
    
    db_config = settings.DATABASES.get('default', {})
    print(f"  ENGINE: {db_config.get('ENGINE', 'Non d√©fini')}")
    print(f"  NAME: {db_config.get('NAME', 'Non d√©fini')}")
    
    try:
        from django.db import connection
        with connection.cursor() as cursor:
            cursor.execute("SELECT 1")
            print("  ‚úÖ Connexion √† la base de donn√©es r√©ussie")
    except Exception as e:
        print(f"  ‚ùå Erreur de connexion √† la base de donn√©es: {e}")
        return False
    
    return True

def check_railway_config():
    """V√©rifier la configuration Railway"""
    print("\nüöÇ V√©rification de la configuration Railway...")
    
    # V√©rifier les variables Railway
    railway_vars = [
        'RAILWAY_HOST',
        'PORT',
        'RAILWAY_STATIC_URL',
        'RAILWAY_ENVIRONMENT',
    ]
    
    for var in railway_vars:
        value = os.getenv(var, 'Non d√©fini')
        print(f"  {var}: {value}")
    
    # V√©rifier les fichiers de configuration Railway
    railway_files = ['railway.json', 'Procfile', 'nixpacks.toml']
    for file in railway_files:
        file_path = BASE_DIR / file
        if file_path.exists():
            print(f"  ‚úÖ {file} trouv√©")
        else:
            print(f"  ‚ö†Ô∏è  {file} manquant")
    
    return True

def run_django_checks():
    """Ex√©cuter les v√©rifications Django"""
    print("\nüîß Ex√©cution des v√©rifications Django...")
    
    try:
        # Simuler la commande check
        from django.core.management import execute_from_command_line
        execute_from_command_line(['manage.py', 'check'])
        print("  ‚úÖ V√©rifications Django r√©ussies")
        return True
    except Exception as e:
        print(f"  ‚ùå Erreur lors des v√©rifications Django: {e}")
        return False

def main():
    """Fonction principale"""
    print("üöÄ Diagnostic Railway 404 - BoliBana Stock")
    print("=" * 50)
    
    checks = [
        check_django_setup,
        check_urls,
        check_static_files,
        check_database,
        check_railway_config,
        run_django_checks,
    ]
    
    results = []
    for check in checks:
        try:
            result = check()
            results.append(result)
        except Exception as e:
            print(f"  ‚ùå Erreur lors de {check.__name__}: {e}")
            results.append(False)
    
    print("\n" + "=" * 50)
    print("üìä R√©sum√© du diagnostic:")
    
    if all(results):
        print("‚úÖ Toutes les v√©rifications sont pass√©es")
        print("\nüí° Suggestions pour r√©soudre les 404:")
        print("  1. V√©rifier que l'application est bien d√©ploy√©e sur Railway")
        print("  2. V√©rifier les logs Railway pour des erreurs")
        print("  3. Tester les endpoints avec curl ou Postman")
        print("  4. V√©rifier la configuration CORS")
    else:
        print("‚ùå Certaines v√©rifications ont √©chou√©")
        print("\nüîß Actions recommand√©es:")
        print("  1. Corriger les erreurs identifi√©es ci-dessus")
        print("  2. V√©rifier la configuration des variables d'environnement")
        print("  3. Red√©ployer l'application sur Railway")
        print("  4. Consulter les logs Railway")

if __name__ == '__main__':
    main()
