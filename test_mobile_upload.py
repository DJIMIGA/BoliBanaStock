#!/usr/bin/env python3
"""
Script de diagnostic pour tester l'upload d'image mobile
Simule les requ√™tes depuis un appareil mobile vers l'API Railway
"""

import requests
import json
import os
from datetime import datetime
import time

# Configuration
API_BASE_URL = "https://web-production-e896b.up.railway.app/api/v1"
TEST_IMAGE_PATH = "test_mobile_image.jpg"

def log(message, level="INFO"):
    """Log avec timestamp"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] {level}: {message}")

def create_test_image():
    """Cr√©er une image de test simple"""
    try:
        from PIL import Image
        import io
        
        # Cr√©er une image de test 200x200 pixels
        img = Image.new('RGB', (200, 200), color='blue')
        img.save(TEST_IMAGE_PATH, 'JPEG')
        log(f"‚úÖ Image de test cr√©√©e: {TEST_IMAGE_PATH}")
        return True
    except ImportError:
        log("‚ö†Ô∏è PIL non disponible, cr√©ation d'image √©chou√©e", "WARNING")
        return False
    except Exception as e:
        log(f"‚ùå Erreur cr√©ation image: {e}", "ERROR")
        return False

def test_api_connectivity():
    """Tester la connectivit√© de base √† l'API"""
    log("üîç Test de connectivit√© API...")
    
    try:
        response = requests.get(f"{API_BASE_URL}/", timeout=10)
        log(f"‚úÖ Connectivit√© OK: {response.status_code}")
        return True
    except requests.exceptions.RequestException as e:
        log(f"‚ùå Erreur de connectivit√©: {e}", "ERROR")
        return False

def test_cors_headers():
    """Tester les en-t√™tes CORS"""
    log("üîç Test des en-t√™tes CORS...")
    
    try:
        # Simuler une requ√™te depuis un appareil mobile
        headers = {
            'Origin': 'exp://192.168.1.7:8081',
            'User-Agent': 'Expo/2.0.0 (Android)',
            'Accept': 'application/json',
        }
        
        response = requests.options(f"{API_BASE_URL}/products/", headers=headers, timeout=10)
        
        cors_headers = {
            'Access-Control-Allow-Origin': response.headers.get('Access-Control-Allow-Origin'),
            'Access-Control-Allow-Methods': response.headers.get('Access-Control-Allow-Methods'),
            'Access-Control-Allow-Headers': response.headers.get('Access-Control-Allow-Headers'),
        }
        
        log(f"üìã En-t√™tes CORS: {cors_headers}")
        
        if response.headers.get('Access-Control-Allow-Origin'):
            log("‚úÖ CORS configur√©", "SUCCESS")
            return True
        else:
            log("‚ö†Ô∏è CORS non configur√©", "WARNING")
            return False
            
    except Exception as e:
        log(f"‚ùå Erreur test CORS: {e}", "ERROR")
        return False

def test_product_creation_with_image():
    """Tester la cr√©ation de produit avec image"""
    log("üîç Test cr√©ation produit avec image...")
    
    if not os.path.exists(TEST_IMAGE_PATH):
        log("‚ùå Image de test non trouv√©e", "ERROR")
        return False
    
    try:
        # Donn√©es du produit de test
        product_data = {
            'name': f'Test Mobile {datetime.now().strftime("%H:%M:%S")}',
            'description': 'Produit de test pour diagnostic mobile',
            'purchase_price': '1000',
            'selling_price': '1500',
            'quantity': '10',
            'alert_threshold': '5',
            'category': '1',  # Assurez-vous que cette cat√©gorie existe
            'brand': '1',     # Assurez-vous que cette marque existe
            'is_active': 'true',
        }
        
        # Pr√©parer FormData
        files = {
            'image': ('test_mobile_image.jpg', open(TEST_IMAGE_PATH, 'rb'), 'image/jpeg')
        }
        
        # En-t√™tes simulant un appareil mobile
        headers = {
            'Origin': 'exp://192.168.1.7:8081',
            'User-Agent': 'Expo/2.0.0 (Android)',
            'Accept': 'application/json',
        }
        
        log("üì§ Tentative d'upload...")
        start_time = time.time()
        
        response = requests.post(
            f"{API_BASE_URL}/products/",
            data=product_data,
            files=files,
            headers=headers,
            timeout=60
        )
        
        upload_time = time.time() - start_time
        log(f"üìä R√©ponse: {response.status_code} en {upload_time:.2f}s")
        
        if response.status_code == 201:
            log("‚úÖ Cr√©ation produit r√©ussie!", "SUCCESS")
            product_data = response.json()
            log(f"üì¶ Produit cr√©√©: ID {product_data.get('id')}")
            return True
        else:
            log(f"‚ùå √âchec cr√©ation: {response.text}", "ERROR")
            return False
            
    except requests.exceptions.Timeout:
        log("‚ùå Timeout lors de l'upload", "ERROR")
        return False
    except requests.exceptions.RequestException as e:
        log(f"‚ùå Erreur requ√™te: {e}", "ERROR")
        return False
    except Exception as e:
        log(f"‚ùå Erreur inattendue: {e}", "ERROR")
        return False

def test_upload_image_endpoint():
    """Tester l'endpoint d√©di√© upload_image"""
    log("üîç Test endpoint upload_image...")
    
    # D'abord cr√©er un produit sans image
    try:
        product_data = {
            'name': f'Test Upload {datetime.now().strftime("%H:%M:%S")}',
            'description': 'Produit pour test upload_image',
            'purchase_price': '1000',
            'selling_price': '1500',
            'quantity': '10',
            'alert_threshold': '5',
            'category': '1',
            'brand': '1',
            'is_active': 'true',
        }
        
        headers = {
            'Origin': 'exp://192.168.1.7:8081',
            'User-Agent': 'Expo/2.0.0 (Android)',
            'Accept': 'application/json',
        }
        
        # Cr√©er le produit
        response = requests.post(
            f"{API_BASE_URL}/products/",
            data=product_data,
            headers=headers,
            timeout=30
        )
        
        if response.status_code != 201:
            log(f"‚ùå √âchec cr√©ation produit pour test: {response.text}", "ERROR")
            return False
        
        product_id = response.json().get('id')
        log(f"‚úÖ Produit cr√©√© pour test: ID {product_id}")
        
        # Maintenant tester l'upload d'image
        if os.path.exists(TEST_IMAGE_PATH):
            files = {
                'image': ('test_upload.jpg', open(TEST_IMAGE_PATH, 'rb'), 'image/jpeg')
            }
            
            upload_response = requests.post(
                f"{API_BASE_URL}/products/{product_id}/upload_image/",
                data={'name': 'Test Upload Image'},
                files=files,
                headers=headers,
                timeout=60
            )
            
            log(f"üìä R√©ponse upload_image: {upload_response.status_code}")
            
            if upload_response.status_code == 200:
                log("‚úÖ Upload via upload_image r√©ussi!", "SUCCESS")
                return True
            else:
                log(f"‚ùå √âchec upload_image: {upload_response.text}", "ERROR")
                return False
        else:
            log("‚ö†Ô∏è Image de test non trouv√©e pour upload_image", "WARNING")
            return False
            
    except Exception as e:
        log(f"‚ùå Erreur test upload_image: {e}", "ERROR")
        return False

def cleanup():
    """Nettoyer les fichiers de test"""
    try:
        if os.path.exists(TEST_IMAGE_PATH):
            os.remove(TEST_IMAGE_PATH)
            log("üßπ Fichier de test supprim√©")
    except Exception as e:
        log(f"‚ö†Ô∏è Erreur nettoyage: {e}", "WARNING")

def main():
    """Fonction principale de diagnostic"""
    log("üöÄ D√©marrage diagnostic upload mobile")
    log(f"üåê API: {API_BASE_URL}")
    
    results = {}
    
    # Test 1: Connectivit√©
    results['connectivity'] = test_api_connectivity()
    
    # Test 2: CORS
    results['cors'] = test_cors_headers()
    
    # Test 3: Cr√©ation produit avec image
    results['create_with_image'] = test_product_creation_with_image()
    
    # Test 4: Endpoint upload_image
    results['upload_image_endpoint'] = test_upload_image_endpoint()
    
    # R√©sum√©
    log("üìä R√©sum√© des tests:")
    for test_name, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        log(f"  {test_name}: {status}")
    
    success_count = sum(results.values())
    total_count = len(results)
    
    log(f"üéØ R√©sultat: {success_count}/{total_count} tests r√©ussis")
    
    if success_count == total_count:
        log("üéâ Tous les tests sont pass√©s!", "SUCCESS")
    else:
        log("‚ö†Ô∏è Certains tests ont √©chou√©", "WARNING")
    
    cleanup()

if __name__ == "__main__":
    main()
