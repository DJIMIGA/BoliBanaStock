#!/usr/bin/env python3
"""
Script d'ajout des cr√®mes cosm√©tiques au rayon DPH
Ajoute les sous-cat√©gories de cr√®mes dans le rayon DPH (Droguerie, Parfumerie, Hygi√®ne)
"""

import os
import sys
import django
from django.db import transaction

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bolibanastock.settings')
django.setup()

from apps.inventory.models import Category
from django.utils.text import slugify

# Cr√®mes cosm√©tiques √† ajouter au rayon DPH
CREMES_DPH = [
    {'name': 'Cr√®me visage', 'description': 'Cr√®mes pour le visage et soins du visage', 'order': 1},
    {'name': 'Cr√®me corps', 'description': 'Cr√®mes pour le corps et hydratation corporelle', 'order': 2},
    {'name': 'Cr√®me solaire', 'description': 'Protection solaire et cr√®mes solaires', 'order': 3},
    {'name': 'Cr√®me hydratante', 'description': 'Cr√®mes hydratantes et nourrissantes', 'order': 4},
    {'name': 'Cr√®me anti-√¢ge', 'description': 'Cr√®mes anti-√¢ge et soins anti-rides', 'order': 5},
    {'name': 'Cr√®me pour les mains', 'description': 'Soins et cr√®mes pour les mains', 'order': 6},
    {'name': 'Cr√®me pour les pieds', 'description': 'Soins et cr√®mes pour les pieds', 'order': 7},
    {'name': 'Cr√®me r√©paratrice', 'description': 'Cr√®mes r√©paratrices et cicatrisantes', 'order': 8},
    {'name': 'Cr√®me apaisante', 'description': 'Cr√®mes apaisantes et calmantes', 'order': 9},
    {'name': 'Cr√®me de nuit', 'description': 'Soins de nuit et cr√®mes nocturnes', 'order': 10},
]

def add_cremes_to_dph():
    """Ajoute les cr√®mes cosm√©tiques au rayon DPH"""
    
    print("üß¥ Ajout des cr√®mes cosm√©tiques au rayon DPH...")
    print("=" * 50)
    
    # 1. Trouver le rayon DPH
    try:
        dph_rayon = Category.objects.get(
            rayon_type='dph',
            is_rayon=True,
            level=0
        )
        print(f"‚úÖ Rayon DPH trouv√©: {dph_rayon.name}")
    except Category.DoesNotExist:
        print("‚ùå Rayon DPH non trouv√©!")
        return False
    except Category.MultipleObjectsReturned:
        print("‚ùå Plusieurs rayons DPH trouv√©s!")
        return False
    
    # 2. V√©rifier les sous-cat√©gories existantes
    existing_subcategories = dph_rayon.children.filter(is_active=True)
    print(f"üì¶ Sous-cat√©gories existantes dans DPH: {existing_subcategories.count()}")
    
    with transaction.atomic():
        created_count = 0
        updated_count = 0
        error_count = 0
        
        for creme_data in CREMES_DPH:
            print(f"\nüß¥ Ajout de: {creme_data['name']}")
            
            try:
                # V√©rifier si la cr√®me existe d√©j√†
                existing_creme = Category.objects.filter(
                    name=creme_data['name'],
                    parent=dph_rayon
                ).first()
                
                if existing_creme:
                    print(f"   üîÑ Cr√®me existante: {existing_creme.name}")
                    updated_count += 1
                else:
                    # Cr√©er la nouvelle cr√®me
                    new_creme = Category.objects.create(
                        name=creme_data['name'],
                        slug=slugify(creme_data['name']),
                        parent=dph_rayon,
                        description=creme_data['description'],
                        order=creme_data['order'],
                        level=1,  # Sous-cat√©gorie
                        is_global=True,  # Accessible √† tous les sites
                        is_rayon=True,   # Fait partie du syst√®me de rayons
                        rayon_type='dph', # Type DPH
                        is_active=True,
                        site_configuration=None,  # Cat√©gorie globale
                    )
                    
                    print(f"   ‚úÖ Cr√®me cr√©√©e: {new_creme.name}")
                    created_count += 1
                    
            except Exception as e:
                print(f"   ‚ùå Erreur cr√©ation {creme_data['name']}: {e}")
                error_count += 1
    
    # 3. Afficher le r√©sum√©
    print(f"\nüìä R√âSULTATS:")
    print(f"   ‚úÖ Cr√©√©es: {created_count}")
    print(f"   üîÑ Existantes: {updated_count}")
    print(f"   ‚ùå Erreurs: {error_count}")
    
    # 4. V√©rifier la structure finale
    print(f"\nüîç V√©rification de la structure finale:")
    final_subcategories = dph_rayon.children.filter(is_active=True).order_by('order', 'name')
    print(f"   üì¶ Total sous-cat√©gories DPH: {final_subcategories.count()}")
    
    print(f"\nüìã Sous-cat√©gories DPH (par ordre):")
    for subcat in final_subcategories:
        print(f"   {subcat.order:2d}. {subcat.name}")
    
    return error_count == 0

def verify_dph_structure():
    """V√©rifie la structure compl√®te du rayon DPH"""
    
    print("\nüîç V√©rification de la structure DPH:")
    print("=" * 40)
    
    try:
        dph_rayon = Category.objects.get(rayon_type='dph', is_rayon=True, level=0)
        
        print(f"üè™ Rayon principal: {dph_rayon.name}")
        print(f"   - Type: {dph_rayon.rayon_type}")
        print(f"   - Global: {dph_rayon.is_global}")
        print(f"   - Actif: {dph_rayon.is_active}")
        
        subcategories = dph_rayon.children.filter(is_active=True).order_by('order', 'name')
        print(f"\nüì¶ Sous-cat√©gories ({subcategories.count()}):")
        
        for subcat in subcategories:
            print(f"   ‚Ä¢ {subcat.name}")
            if subcat.description:
                print(f"     ‚îî‚îÄ {subcat.description}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur v√©rification: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Ajout des cr√®mes cosm√©tiques au rayon DPH")
    print("=" * 60)
    
    # Ajouter les cr√®mes
    success = add_cremes_to_dph()
    
    if success:
        print("\n‚úÖ Cr√®mes ajout√©es avec succ√®s!")
        
        # V√©rifier la structure
        verify_dph_structure()
        
        print("\nüéâ Le rayon DPH contient maintenant toutes les cr√®mes cosm√©tiques!")
        print("   - Cr√®me visage")
        print("   - Cr√®me corps") 
        print("   - Cr√®me solaire")
        print("   - Cr√®me hydratante")
        print("   - Cr√®me anti-√¢ge")
        print("   - Cr√®me pour les mains")
        print("   - Cr√®me pour les pieds")
        print("   - Cr√®me r√©paratrice")
        print("   - Cr√®me apaisante")
        print("   - Cr√®me de nuit")
    else:
        print("\n‚ùå Des erreurs sont survenues lors de l'ajout des cr√®mes")
    
    print("\n" + "=" * 60)
