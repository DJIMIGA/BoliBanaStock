#!/usr/bin/env python3
"""
Test de suppression de l'ancienne m√©thode de cr√©ation de cat√©gorie
"""

import os
import sys

def test_old_method_removal():
    """Teste que l'ancienne m√©thode a √©t√© supprim√©e"""
    
    print("üîç TEST SUPPRESSION ANCIENNE M√âTHODE")
    print("=" * 60)
    
    add_product_file = 'BoliBanaStockMobile/src/screens/AddProductScreen.tsx'
    
    if not os.path.exists(add_product_file):
        print(f"‚ùå Fichier {add_product_file} non trouv√©")
        return False
    
    with open(add_product_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # V√©rifier que les anciens √©l√©ments ont √©t√© supprim√©s
    old_elements = [
        'categoryModalVisible',
        'createCategoryQuick',
        'newCategoryName',
        'newCategoryDescription',
        'creatingCategory',
        'alternativeButton',
        'categoryActions',
        'actionButton'
    ]
    
    print("üì± V√©rification de la suppression des anciens √©l√©ments:")
    removed_elements = []
    for element in old_elements:
        if element not in content:
            print(f"‚úÖ {element} - SUPPRIM√â")
            removed_elements.append(element)
        else:
            print(f"‚ùå {element} - ENCORE PR√âSENT")
    
    # V√©rifier que les nouveaux √©l√©ments sont pr√©sents
    new_elements = [
        'newCategoryModalVisible',
        'CategoryCreationModal',
        'HierarchicalCategorySelector',
        'createCategoryButton',
        'handleNewCategoryCreated'
    ]
    
    print("\nüì± V√©rification de la pr√©sence des nouveaux √©l√©ments:")
    present_elements = []
    for element in new_elements:
        if element in content:
            print(f"‚úÖ {element} - PR√âSENT")
            present_elements.append(element)
        else:
            print(f"‚ùå {element} - MANQUANT")
    
    # V√©rifier que l'interface est coh√©rente
    print("\nüì± V√©rification de la coh√©rence de l'interface:")
    
    # V√©rifier qu'il n'y a qu'un seul bouton de cr√©ation de cat√©gorie
    create_button_count = content.count('Cr√©er une')
    if create_button_count == 1:
        print("‚úÖ Un seul bouton de cr√©ation de cat√©gorie")
    else:
        print(f"‚ùå {create_button_count} boutons de cr√©ation trouv√©s (attendu: 1)")
    
    # V√©rifier qu'il n'y a qu'un seul modal de cat√©gorie
    category_modal_count = content.count('CategoryModal')
    if category_modal_count == 2:  # CategoryCreationModal et HierarchicalCategorySelector
        print("‚úÖ Deux modals de cat√©gorie (cr√©ation + s√©lection)")
    else:
        print(f"‚ùå {category_modal_count} modals de cat√©gorie trouv√©s (attendu: 2)")
    
    return len(removed_elements) >= 6 and len(present_elements) >= 4

def test_interface_consistency():
    """Teste la coh√©rence de l'interface"""
    
    print("\nüîç TEST COH√âRENCE INTERFACE")
    print("=" * 60)
    
    add_product_file = 'BoliBanaStockMobile/src/screens/AddProductScreen.tsx'
    
    with open(add_product_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # V√©rifier que l'interface est coh√©rente
    consistency_checks = [
        ("Import CategoryCreationModal", "import CategoryCreationModal"),
        ("Import HierarchicalCategorySelector", "import HierarchicalCategorySelector"),
        ("√âtat newCategoryModalVisible", "newCategoryModalVisible"),
        ("√âtat hierarchicalCategoryModalVisible", "hierarchicalCategoryModalVisible"),
        ("Fonction handleNewCategoryCreated", "handleNewCategoryCreated"),
        ("Fonction handleHierarchicalCategorySelect", "handleHierarchicalCategorySelect"),
        ("Bouton createCategoryButton", "createCategoryButton"),
        ("Modal CategoryCreationModal", "<CategoryCreationModal"),
        ("Modal HierarchicalCategorySelector", "<HierarchicalCategorySelector"),
    ]
    
    print("üì± V√©rification de la coh√©rence:")
    all_present = True
    for check_name, check_pattern in consistency_checks:
        if check_pattern in content:
            print(f"‚úÖ {check_name}")
        else:
            print(f"‚ùå {check_name}")
            all_present = False
    
    return all_present

def test_workflow_simplification():
    """Teste la simplification du workflow"""
    
    print("\nüîç TEST SIMPLIFICATION WORKFLOW")
    print("=" * 60)
    
    print("üì± Nouveau workflow simplifi√©:")
    workflow_steps = [
        "1. Utilisateur clique sur le s√©lecteur de cat√©gorie",
        "2. Modal HierarchicalCategorySelector s'ouvre",
        "3. S√©lection hi√©rarchis√©e (rayon ‚Üí sous-cat√©gorie)",
        "4. OU clic sur 'Cr√©er une nouvelle cat√©gorie'",
        "5. Modal CategoryCreationModal s'ouvre",
        "6. Cr√©ation avec interface hi√©rarchis√©e",
        "7. S√©lection automatique de la nouvelle cat√©gorie"
    ]
    
    for step in workflow_steps:
        print(f"‚úÖ {step}")
    
    print("\nüì± Ancien workflow supprim√©:")
    old_workflow = [
        "‚ùå Modal simple de cr√©ation de cat√©gorie",
        "‚ùå Champs nom/description basiques",
        "‚ùå Pas de hi√©rarchie",
        "‚ùå Pas de types de rayon",
        "‚ùå Interface non coh√©rente"
    ]
    
    for step in old_workflow:
        print(f"{step}")
    
    return True

if __name__ == "__main__":
    print("üöÄ Test de suppression de l'ancienne m√©thode de cr√©ation de cat√©gorie...")
    print()
    
    # Tests
    success1 = test_old_method_removal()
    success2 = test_interface_consistency()
    success3 = test_workflow_simplification()
    
    print()
    if all([success1, success2, success3]):
        print("üéâ Tous les tests sont pass√©s!")
        print("‚úÖ L'ancienne m√©thode a √©t√© compl√®tement supprim√©e!")
        print("\nüì± Interface simplifi√©e:")
        print("   - Un seul bouton de cr√©ation de cat√©gorie")
        print("   - Interface hi√©rarchis√©e moderne")
        print("   - Workflow coh√©rent et intuitif")
        print("   - Code plus propre et maintenable")
    else:
        print("‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez la suppression.")
