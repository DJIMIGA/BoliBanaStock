#!/usr/bin/env python3
"""
Test de la g√©n√©ration automatique d'EAN √† la cr√©ation de produits
"""

import requests
import json
import sys

# Configuration
BASE_URL = "http://127.0.0.1:8000"
API_BASE = f"{BASE_URL}/api/v1"

def test_ean_generation_at_creation():
    """Test de la g√©n√©ration automatique d'EAN √† la cr√©ation"""
    
    print("üè∑Ô∏è  Test de G√©n√©ration Automatique d'EAN √† la Cr√©ation")
    print("=" * 60)
    
    # 1. Authentification
    print("\n1Ô∏è‚É£ Authentification...")
    auth_data = {
        "username": "admin",
        "password": "admin123"
    }
    
    try:
        auth_response = requests.post(f"{API_BASE}/auth/login/", json=auth_data)
        if auth_response.status_code == 200:
            auth_result = auth_response.json()
            access_token = auth_result.get('access_token')
            print(f"‚úÖ Authentification r√©ussie")
        else:
            print(f"‚ùå √âchec authentification: {auth_response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur authentification: {e}")
        return False
    
    # Headers avec token
    headers = {
        'Authorization': f'Bearer {access_token}',
        'Content-Type': 'application/json'
    }
    
    # 2. Cr√©er un nouveau produit de test
    print("\n2Ô∏è‚É£ Cr√©ation d'un nouveau produit...")
    
    # Donn√©es du produit de test
    product_data = {
        "name": "Produit Test EAN Auto",
        "cug": "EANAUTO001",
        "description": "Produit de test pour v√©rifier la g√©n√©ration automatique d'EAN",
        "purchase_price": 1000,
        "selling_price": 1500,
        "quantity": 10,
        "category": 1,  # Utiliser une cat√©gorie existante
        "brand": 1,     # Utiliser une marque existante
        "is_active": True
    }
    
    try:
        create_response = requests.post(f"{API_BASE}/products/", json=product_data, headers=headers)
        if create_response.status_code == 201:
            created_product = create_response.json()
            product_id = created_product.get('id')
            print(f"‚úÖ Produit cr√©√© avec succ√®s (ID: {product_id})")
            print(f"   Nom: {created_product.get('name')}")
            print(f"   CUG: {created_product.get('cug')}")
            print(f"   EAN G√©n√©r√©: {created_product.get('generated_ean', 'Non trouv√©')}")
        else:
            print(f"‚ùå Erreur cr√©ation produit: {create_response.status_code}")
            print(f"Erreur: {create_response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation produit: {e}")
        return False
    
    # 3. V√©rifier que l'EAN a √©t√© g√©n√©r√©
    print("\n3Ô∏è‚É£ V√©rification de l'EAN g√©n√©r√©...")
    
    if created_product.get('generated_ean'):
        ean = created_product.get('generated_ean')
        print(f"‚úÖ EAN g√©n√©r√© automatiquement: {ean}")
        
        # V√©rifier la validit√© de l'EAN
        if len(ean) == 13 and ean.isdigit():
            print(f"‚úÖ EAN valide (13 chiffres)")
        else:
            print(f"‚ùå EAN invalide: {ean}")
            return False
        
        # V√©rifier que l'EAN commence par le pr√©fixe attendu
        if ean.startswith('200'):
            print(f"‚úÖ EAN utilise le pr√©fixe correct (200)")
        else:
            print(f"‚ùå EAN n'utilise pas le pr√©fixe attendu: {ean}")
            return False
    else:
        print(f"‚ùå Aucun EAN g√©n√©r√© trouv√©")
        return False
    
    # 4. Tester le scan du nouveau produit
    print("\n4Ô∏è‚É£ Test de scan du nouveau produit...")
    
    cug = created_product.get('cug')
    ean = created_product.get('generated_ean')
    
    # Test scan par CUG
    try:
        scan_data = {"code": cug}
        scan_response = requests.post(f"{API_BASE}/products/scan/", json=scan_data, headers=headers)
        
        if scan_response.status_code == 200:
            scan_result = scan_response.json()
            print(f"‚úÖ Scan par CUG: {scan_result.get('name', 'N/A')}")
        else:
            print(f"‚ùå Scan par CUG √©chou√©: {scan_response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur scan CUG: {e}")
    
    # Test scan par EAN g√©n√©r√©
    try:
        scan_data = {"code": ean}
        scan_response = requests.post(f"{API_BASE}/products/scan/", json=scan_data, headers=headers)
        
        if scan_response.status_code == 200:
            scan_result = scan_response.json()
            print(f"‚úÖ Scan par EAN: {scan_result.get('name', 'N/A')}")
        else:
            print(f"‚ùå Scan par EAN √©chou√©: {scan_response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur scan EAN: {e}")
    
    # 5. V√©rifier les √©tiquettes
    print("\n5Ô∏è‚É£ V√©rification des √©tiquettes...")
    
    try:
        labels_response = requests.get(f"{API_BASE}/labels/generate/", headers=headers)
        if labels_response.status_code == 200:
            labels_data = labels_response.json()
            products = labels_data.get('products', [])
            
            # Chercher notre produit dans les √©tiquettes
            our_product = None
            for product in products:
                if product.get('id') == product_id:
                    our_product = product
                    break
            
            if our_product:
                print(f"‚úÖ Produit trouv√© dans les √©tiquettes")
                print(f"   EAN dans √©tiquettes: {our_product.get('barcode_ean')}")
                
                if our_product.get('barcode_ean') == ean:
                    print(f"‚úÖ EAN coh√©rent entre produit et √©tiquettes")
                else:
                    print(f"‚ùå EAN incoh√©rent: produit={ean}, √©tiquettes={our_product.get('barcode_ean')}")
            else:
                print(f"‚ùå Produit non trouv√© dans les √©tiquettes")
        else:
            print(f"‚ùå Erreur r√©cup√©ration √©tiquettes: {labels_response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur v√©rification √©tiquettes: {e}")
    
    # 6. Nettoyer le produit de test
    print("\n6Ô∏è‚É£ Nettoyage du produit de test...")
    
    try:
        delete_response = requests.delete(f"{API_BASE}/products/{product_id}/", headers=headers)
        if delete_response.status_code == 204:
            print(f"‚úÖ Produit de test supprim√©")
        else:
            print(f"‚ö†Ô∏è  Produit de test non supprim√©: {delete_response.status_code}")
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur suppression: {e}")
    
    # 7. R√©sum√©
    print("\n7Ô∏è‚É£ R√©sum√© du Test:")
    print("-" * 30)
    print("‚úÖ EAN g√©n√©r√© automatiquement √† la cr√©ation")
    print("‚úÖ EAN valide (13 chiffres, pr√©fixe 200)")
    print("‚úÖ Scan par CUG fonctionne")
    print("‚úÖ Scan par EAN fonctionne")
    print("‚úÖ EAN coh√©rent dans les √©tiquettes")
    print("‚úÖ Syst√®me pr√™t pour les produits artisanaux")
    
    return True

if __name__ == "__main__":
    print("üöÄ D√©marrage du test de g√©n√©ration automatique d'EAN...")
    success = test_ean_generation_at_creation()
    
    if success:
        print("\nüéâ Test r√©ussi ! La g√©n√©ration automatique d'EAN fonctionne parfaitement.")
    else:
        print("\n‚ùå Test √©chou√©. V√©rifiez la configuration.")
        sys.exit(1)
