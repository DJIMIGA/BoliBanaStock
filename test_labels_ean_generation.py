#!/usr/bin/env python3
"""
Test de g√©n√©ration d'EAN-13 √† partir des CUG pour les labels
"""

import os
import sys
import django

# Configuration Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bolibanastock.settings')
django.setup()

from apps.inventory.models import Product
from apps.inventory.utils import generate_ean13_from_cug

def test_ean_generation():
    """Test de g√©n√©ration d'EAN-13 √† partir des CUG"""
    print("üß™ Test de g√©n√©ration d'EAN-13 √† partir des CUG...")
    
    # R√©cup√©rer quelques produits de test
    products = Product.objects.all()[:10]
    
    print(f"\nüìã G√©n√©ration d'EAN-13 pour {len(products)} produits :")
    print("=" * 80)
    
    for i, product in enumerate(products, 1):
        # G√©n√©rer l'EAN-13 √† partir du CUG
        generated_ean = generate_ean13_from_cug(product.cug)
        
        # V√©rifier la longueur
        is_valid_length = len(generated_ean) == 13
        
        # V√©rifier que ce sont des chiffres
        is_numeric = generated_ean.isdigit()
        
        # Afficher les informations
        print(f"{i:2d}. {product.name[:30]:<30} | CUG: {product.cug:<10} | EAN: {generated_ean} | ‚úÖ" if is_valid_length and is_numeric else f"{i:2d}. {product.name[:30]:<30} | CUG: {product.cug:<10} | EAN: {generated_ean} | ‚ùå")
    
    print("\nüîç V√©rification de la logique de l'API des labels...")
    
    # Simuler la logique de l'API
    total_products = Product.objects.count()
    products_with_barcodes = Product.objects.filter(barcodes__isnull=False).distinct().count()
    products_without_barcodes = total_products - products_with_barcodes
    
    print(f"üìä Total produits: {total_products}")
    print(f"üì¶ Produits avec codes-barres existants: {products_with_barcodes}")
    print(f"üì¶ Produits sans codes-barres: {products_without_barcodes}")
    
    # Simuler la g√©n√©ration pour tous les produits
    print(f"\nüè∑Ô∏è G√©n√©ration d'√©tiquettes avec EAN-13 g√©n√©r√©s :")
    
    all_products = Product.objects.all()
    generated_labels = 0
    
    for product in all_products:
        # Nouvelle logique : toujours g√©n√©rer un EAN-13 √† partir du CUG
        barcode_ean = generate_ean13_from_cug(product.cug)
        generated_labels += 1
    
    print(f"‚úÖ √âtiquettes g√©n√©r√©es: {generated_labels}/{total_products}")
    print(f"üéØ Tous les produits utilisent maintenant un EAN-13 g√©n√©r√© √† partir du CUG !")
    
    return generated_labels == total_products

def show_ean_examples():
    """Afficher des exemples de g√©n√©ration d'EAN-13"""
    print(f"\nüî¢ Exemples de g√©n√©ration d'EAN-13 :")
    print("=" * 50)
    
    test_cugs = ["API001", "INV001", "COUNT001", "12345", "1", "99999"]
    
    for cug in test_cugs:
        try:
            ean = generate_ean13_from_cug(cug)
            print(f"CUG: {cug:<10} ‚Üí EAN-13: {ean} (longueur: {len(ean)})")
        except Exception as e:
            print(f"CUG: {cug:<10} ‚Üí ERREUR: {str(e)}")

if __name__ == "__main__":
    print("üöÄ Test de g√©n√©ration d'EAN-13 pour les labels")
    print("=" * 60)
    
    # Afficher des exemples
    show_ean_examples()
    
    # Tester la g√©n√©ration
    success = test_ean_generation()
    
    if success:
        print(f"\nüéâ SUCC√àS !")
        print(f"   Tous les produits utilisent maintenant des EAN-13 g√©n√©r√©s √† partir du CUG.")
        print(f"   Les codes-barres existants sont remplac√©s par les EAN-13 g√©n√©r√©s.")
    else:
        print(f"\n‚ùå √âCHEC !")
        print(f"   V√©rifiez la logique de g√©n√©ration.")
