# Script PowerShell pour d√©marrer le serveur Django et ex√©cuter les tests de stock

Write-Host "üöÄ D√©marrage du serveur Django et tests des endpoints de stock" -ForegroundColor Green
Write-Host "==============================================================" -ForegroundColor Green

# V√©rifier si Python est disponible
try {
    $pythonVersion = python --version 2>&1
    Write-Host "‚úÖ Python d√©tect√©: $pythonVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Python n'est pas install√© ou pas dans le PATH" -ForegroundColor Red
    exit 1
}

# V√©rifier si le fichier de settings existe
if (-not (Test-Path "BoliBanaStock/settings.py")) {
    Write-Host "‚ùå Fichier de settings Django non trouv√©" -ForegroundColor Red
    Write-Host "Assurez-vous d'√™tre dans le r√©pertoire racine du projet" -ForegroundColor Yellow
    exit 1
}

# Installer les d√©pendances si n√©cessaire
Write-Host "üì¶ V√©rification des d√©pendances..." -ForegroundColor Blue
pip install requests django

# D√©marrer le serveur Django en arri√®re-plan
Write-Host "üåê D√©marrage du serveur Django sur localhost:8000..." -ForegroundColor Blue
$serverJob = Start-Job -ScriptBlock {
    Set-Location $using:PWD
    python manage.py runserver 8000
}

# Attendre que le serveur d√©marre
Write-Host "‚è≥ Attente du d√©marrage du serveur..." -ForegroundColor Yellow
Start-Sleep -Seconds 5

# V√©rifier si le serveur r√©pond
Write-Host "üîç V√©rification de la disponibilit√© du serveur..." -ForegroundColor Blue
try {
    $response = Invoke-WebRequest -Uri "http://localhost:8000/api/v1/" -UseBasicParsing -TimeoutSec 10
    Write-Host "‚úÖ Serveur Django d√©marr√© avec succ√®s" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Le serveur Django ne r√©pond pas" -ForegroundColor Red
    Stop-Job $serverJob
    Remove-Job $serverJob
    exit 1
}

# Ex√©cuter le test rapide
Write-Host ""
Write-Host "üß™ Ex√©cution du test rapide des endpoints de stock..." -ForegroundColor Blue
Write-Host "==================================================" -ForegroundColor Blue

python quick_stock_test.py
$testResult = $LASTEXITCODE

# Arr√™ter le serveur
Write-Host ""
Write-Host "üõë Arr√™t du serveur Django..." -ForegroundColor Blue
Stop-Job $serverJob
Remove-Job $serverJob

# R√©sultat
if ($testResult -eq 0) {
    Write-Host ""
    Write-Host "üéâ Tests r√©ussis ! Les endpoints de gestion de stock fonctionnent correctement." -ForegroundColor Green
    Write-Host ""
    Write-Host "üìã Prochaines √©tapes :" -ForegroundColor Cyan
    Write-Host "1. Impl√©menter la nouvelle approche dans le frontend" -ForegroundColor White
    Write-Host "2. Modifier le backend pour ne plus retirer automatiquement le stock lors des ventes" -ForegroundColor White
    Write-Host "3. Tester l'int√©gration compl√®te" -ForegroundColor White
} else {
    Write-Host ""
    Write-Host "‚ùå Tests √©chou√©s ! V√©rifiez les logs ci-dessus pour identifier les probl√®mes." -ForegroundColor Red
    Write-Host ""
    Write-Host "üîß Actions recommand√©es :" -ForegroundColor Yellow
    Write-Host "1. V√©rifier que les endpoints sont correctement configur√©s" -ForegroundColor White
    Write-Host "2. V√©rifier les permissions et l'authentification" -ForegroundColor White
    Write-Host "3. V√©rifier les mod√®les et les migrations" -ForegroundColor White
}

exit $testResult
