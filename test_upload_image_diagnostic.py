#!/usr/bin/env python3
"""
Script de diagnostic pour l'upload d'image
Teste l'endpoint upload_image et identifie les probl√®mes
"""

import requests
import json
import os
from io import BytesIO
from PIL import Image

# Configuration
API_BASE_URL = "https://web-production-e896b.up.railway.app/api/v1"
PRODUCT_ID = 9  # ID du produit √† tester

def log(message, level="INFO"):
    """Fonction de logging avec couleurs"""
    colors = {
        "INFO": "\033[94m",
        "SUCCESS": "\033[92m",
        "WARNING": "\033[93m",
        "ERROR": "\033[91m",
        "RESET": "\033[0m"
    }
    print(f"{colors.get(level, '')}{message}{colors['RESET']}")

def create_test_image():
    """Cr√©er une image de test simple"""
    img = Image.new('RGB', (100, 100), color='red')
    img_io = BytesIO()
    img.save(img_io, 'JPEG')
    img_io.seek(0)
    return img_io

def test_upload_image():
    """Test complet de l'upload d'image"""
    log("üîç DIAGNOSTIC UPLOAD D'IMAGE", "INFO")
    log("=" * 50, "INFO")
    
    # 1. Test de connectivit√© de base
    log("\n1Ô∏è‚É£ Test de connectivit√© de base...", "INFO")
    try:
        response = requests.get(f"{API_BASE_URL}/products/", timeout=10)
        if response.status_code == 200:
            log("‚úÖ Connectivit√© API OK", "SUCCESS")
        else:
            log(f"‚ùå Probl√®me de connectivit√©: {response.status_code}", "ERROR")
            return False
    except Exception as e:
        log(f"‚ùå Erreur de connectivit√©: {e}", "ERROR")
        return False
    
    # 2. Test de l'endpoint upload_image avec OPTIONS (CORS)
    log("\n2Ô∏è‚É£ Test CORS pour upload_image...", "INFO")
    try:
        headers = {
            'Origin': 'https://web-production-e896b.up.railway.app',
            'Access-Control-Request-Method': 'POST',
            'Access-Control-Request-Headers': 'Content-Type, Authorization'
        }
        response = requests.options(f"{API_BASE_URL}/products/{PRODUCT_ID}/upload_image/", 
                                  headers=headers, timeout=10)
        log(f"üìä Status OPTIONS: {response.status_code}", "INFO")
        log(f"üìã Headers CORS: {dict(response.headers)}", "INFO")
        
        if response.status_code == 200:
            log("‚úÖ CORS configur√© correctement", "SUCCESS")
        else:
            log(f"‚ö†Ô∏è  CORS peut √™tre probl√©matique: {response.status_code}", "WARNING")
    except Exception as e:
        log(f"‚ùå Erreur test CORS: {e}", "ERROR")
    
    # 3. Test d'upload avec image de test
    log("\n3Ô∏è‚É£ Test d'upload d'image...", "INFO")
    try:
        # Cr√©er une image de test
        test_image = create_test_image()
        
        # Pr√©parer les donn√©es
        files = {
            'image': ('test_image.jpg', test_image, 'image/jpeg')
        }
        
        data = {
            'name': 'Test Upload Image',
            'description': 'Test de diagnostic'
        }
        
        headers = {
            'Authorization': 'Bearer YOUR_TOKEN_HERE',  # Remplacer par un vrai token
            'Accept': 'application/json',
        }
        
        log("üì§ Tentative d'upload...", "INFO")
        response = requests.post(
            f"{API_BASE_URL}/products/{PRODUCT_ID}/upload_image/",
            data=data,
            files=files,
            headers=headers,
            timeout=30
        )
        
        log(f"üìä Status: {response.status_code}", "INFO")
        log(f"üìã Headers: {dict(response.headers)}", "INFO")
        
        if response.status_code == 200:
            log("‚úÖ Upload r√©ussi!", "SUCCESS")
            return True
        else:
            log(f"‚ùå Upload √©chou√©: {response.text}", "ERROR")
            return False
            
    except requests.exceptions.Timeout:
        log("‚ùå Timeout - Le serveur met trop de temps √† r√©pondre", "ERROR")
        return False
    except requests.exceptions.ConnectionError:
        log("‚ùå Erreur de connexion - V√©rifiez la connectivit√© r√©seau", "ERROR")
        return False
    except Exception as e:
        log(f"‚ùå Erreur inattendue: {e}", "ERROR")
        return False

def test_network_configuration():
    """Test de la configuration r√©seau"""
    log("\n4Ô∏è‚É£ Test de configuration r√©seau...", "INFO")
    
    # Test des timeouts
    timeouts = [5, 10, 30, 60]
    for timeout in timeouts:
        try:
            log(f"‚è±Ô∏è  Test timeout {timeout}s...", "INFO")
            response = requests.get(f"{API_BASE_URL}/products/", timeout=timeout)
            if response.status_code == 200:
                log(f"‚úÖ Timeout {timeout}s OK", "SUCCESS")
                break
        except requests.exceptions.Timeout:
            log(f"‚ùå Timeout {timeout}s √©chou√©", "ERROR")
        except Exception as e:
            log(f"‚ùå Erreur timeout {timeout}s: {e}", "ERROR")

def check_server_logs():
    """V√©rifier les logs du serveur"""
    log("\n5Ô∏è‚É£ V√©rification des logs serveur...", "INFO")
    log("üìã V√©rifiez les logs Railway pour:", "INFO")
    log("   ‚Ä¢ Erreurs CORS", "INFO")
    log("   ‚Ä¢ Timeouts de requ√™te", "INFO")
    log("   ‚Ä¢ Erreurs de parsing multipart", "INFO")
    log("   ‚Ä¢ Probl√®mes de stockage", "INFO")

def main():
    """Fonction principale"""
    log("üöÄ DIAGNOSTIC UPLOAD D'IMAGE BOLIBANA STOCK", "INFO")
    log("=" * 60, "INFO")
    
    # Tests
    success = test_upload_image()
    test_network_configuration()
    check_server_logs()
    
    # R√©sum√©
    log("\nüìã R√âSUM√â DU DIAGNOSTIC", "INFO")
    log("=" * 30, "INFO")
    
    if success:
        log("‚úÖ L'upload d'image fonctionne correctement", "SUCCESS")
    else:
        log("‚ùå Probl√®mes d√©tect√©s avec l'upload d'image", "ERROR")
        log("\nüîß SOLUTIONS RECOMMAND√âES:", "WARNING")
        log("1. V√©rifiez la configuration CORS", "INFO")
        log("2. Augmentez les timeouts c√¥t√© client", "INFO")
        log("3. V√©rifiez la taille des images", "INFO")
        log("4. Testez avec une image plus petite", "INFO")
        log("5. V√©rifiez les logs Railway", "INFO")

if __name__ == "__main__":
    main()
