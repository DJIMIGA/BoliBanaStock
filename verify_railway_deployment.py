#!/usr/bin/env python3
"""
Script de v√©rification du d√©ploiement Railway
V√©rifie que la configuration est correcte et que les fichiers statiques sont collect√©s
"""

import os
import sys
import django
from pathlib import Path

def verify_railway_config():
    """V√©rifier la configuration Railway"""
    print("üîç V√©rification de la configuration Railway...")
    
    # Ajouter le r√©pertoire du projet au path
    project_root = Path(__file__).parent
    sys.path.insert(0, str(project_root))
    
    try:
        # Forcer l'utilisation des settings Railway
        os.environ['DJANGO_SETTINGS_MODULE'] = 'bolibanastock.settings_railway'
        
        # Initialiser Django
        django.setup()
        
        from django.conf import settings
        
        print("‚úÖ Configuration Django Railway charg√©e!")
        print(f"üìÅ STATIC_ROOT: {settings.STATIC_ROOT}")
        print(f"üìÅ STATIC_URL: {settings.STATIC_URL}")
        print(f"üìÅ STATICFILES_STORAGE: {settings.STATICFILES_STORAGE}")
        print(f"üåê DEBUG: {settings.DEBUG}")
        print(f"üåê Environnement: {'Production' if not settings.DEBUG else 'D√©veloppement'}")
        
        # V√©rifier WhiteNoise
        if 'whitenoise' in str(settings.STATICFILES_STORAGE):
            print("‚úÖ WhiteNoise est configur√© pour la production")
        else:
            print("‚ùå WhiteNoise n'est PAS configur√©!")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
        return False

def verify_static_files():
    """V√©rifier que les fichiers statiques sont pr√©sents"""
    print("\nüì¶ V√©rification des fichiers statiques...")
    
    try:
        from django.conf import settings
        from django.core.management import call_command
        
        # Collecter les fichiers statiques
        print("üîÑ Collecte des fichiers statiques...")
        call_command('collectstatic', '--noinput', '--clear')
        
        # V√©rifier que les fichiers sont pr√©sents
        static_root = Path(settings.STATIC_ROOT)
        if static_root.exists():
            admin_static = static_root / 'admin'
            if admin_static.exists():
                css_files = list(admin_static.rglob('*.css'))
                js_files = list(admin_static.rglob('*.js'))
                print(f"üìä Fichiers CSS trouv√©s: {len(css_files)}")
                print(f"üìä Fichiers JS trouv√©s: {len(js_files)}")
                
                if css_files and js_files:
                    print("‚úÖ Fichiers statiques admin collect√©s avec succ√®s!")
                    return True
                else:
                    print("‚ùå Aucun fichier CSS/JS trouv√© dans admin/")
                    return False
            else:
                print("‚ùå Dossier admin/ non trouv√© dans les fichiers statiques")
                return False
        else:
            print("‚ùå STATIC_ROOT n'existe pas")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification des fichiers statiques: {e}")
        return False

def main():
    """Fonction principale"""
    print("üîç V√©rification du d√©ploiement Railway")
    print("=" * 50)
    
    # V√©rifier la configuration
    config_ok = verify_railway_config()
    
    if config_ok:
        # V√©rifier les fichiers statiques
        static_ok = verify_static_files()
        
        if static_ok:
            print("\nüéØ V√©rification r√©ussie!")
            print("‚úÖ La configuration Railway est correcte")
            print("‚úÖ Les fichiers statiques sont collect√©s")
            print("‚úÖ L'interface admin Django devrait fonctionner")
        else:
            print("\n‚ùå Probl√®me avec les fichiers statiques")
            print("‚ö†Ô∏è V√©rifiez la configuration Django")
    else:
        print("\n‚ùå Probl√®me de configuration Railway")
        print("‚ö†Ô∏è V√©rifiez les settings Django")

if __name__ == '__main__':
    main()
