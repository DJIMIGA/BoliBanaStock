#!/usr/bin/env python3
"""
V√©rification simple de l'utilisateur mobile
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bolibanastock.settings')
django.setup()

from django.contrib.auth import get_user_model
from django.db import connection

User = get_user_model()

def check_user_simple():
    """V√©rification simple de l'utilisateur mobile"""
    print("üîç V√©rification simple de l'utilisateur mobile...")
    
    try:
        # R√©cup√©rer l'utilisateur mobile
        user = User.objects.get(username='mobile')
        print(f"‚úÖ Utilisateur trouv√©: {user.username}")
        print(f"   ID: {user.id}")
        print(f"   Email: {user.email}")
        print(f"   Pr√©nom: {user.first_name}")
        print(f"   Nom: {user.last_name}")
        print(f"   Superuser: {user.is_superuser}")
        print(f"   Staff: {user.is_staff}")
        print(f"   Actif: {user.is_active}")
        
        # V√©rifier les attributs disponibles
        print(f"\nüîç Attributs de l'utilisateur:")
        for attr in dir(user):
            if not attr.startswith('_') and not callable(getattr(user, attr)):
                try:
                    value = getattr(user, attr)
                    if not str(value).startswith('<'):
                        print(f"   {attr}: {value}")
                except:
                    pass
        
        # V√©rifier la base de donn√©es directement
        print(f"\nüóÑÔ∏è  V√©rification de la base de donn√©es:")
        with connection.cursor() as cursor:
            # V√©rifier la table des utilisateurs
            cursor.execute("SELECT * FROM auth_user WHERE username = 'mobile'")
            user_row = cursor.fetchone()
            if user_row:
                print(f"   ‚úÖ Utilisateur trouv√© dans la base")
                print(f"   Colonnes: {[desc[0] for desc in cursor.description]}")
            else:
                print(f"   ‚ùå Utilisateur non trouv√© dans la base")
            
            # V√©rifier s'il y a une table de configuration
            cursor.execute("""
                SELECT name FROM sqlite_master 
                WHERE type='table' AND name LIKE '%config%'
            """)
            config_tables = cursor.fetchall()
            print(f"   Tables de configuration: {[t[0] for t in config_tables]}")
            
            # V√©rifier les produits
            cursor.execute("SELECT COUNT(*) FROM inventory_product")
            product_count = cursor.fetchone()[0]
            print(f"   Total des produits: {product_count}")
            
            # V√©rifier s'il y a des produits avec site_configuration
            cursor.execute("""
                SELECT COUNT(*) FROM inventory_product 
                WHERE site_configuration_id IS NOT NULL
            """)
            site_products = cursor.fetchone()[0]
            print(f"   Produits avec site configur√©: {site_products}")
            
            # V√©rifier les produits sans site
            cursor.execute("""
                SELECT COUNT(*) FROM inventory_product 
                WHERE site_configuration_id IS NULL
            """)
            no_site_products = cursor.fetchone()[0]
            print(f"   Produits sans site: {no_site_products}")
        
        return user
        
    except User.DoesNotExist:
        print("‚ùå Utilisateur 'mobile' non trouv√©")
        return None
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
        return None

def main():
    """Fonction principale"""
    print("üöÄ V√©rification simple de l'utilisateur mobile")
    print("=" * 60)
    
    # V√©rification
    user = check_user_simple()
    
    if user:
        print(f"\n‚úÖ V√©rification termin√©e")
        print(f"üí° Si l'utilisateur n'a pas de site_configuration, cela explique l'erreur 500")
    else:
        print(f"\n‚ùå V√©rification √©chou√©e")
    
    print(f"\n" + "=" * 60)

if __name__ == "__main__":
    main()
