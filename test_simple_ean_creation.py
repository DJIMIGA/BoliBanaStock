#!/usr/bin/env python3
"""
Test simple de cr√©ation de produit avec g√©n√©ration d'EAN
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bolibanastock.settings')
django.setup()

from apps.inventory.models import Product, Category, Brand
from apps.inventory.utils import generate_ean13_from_cug

def test_simple_ean_creation():
    """Test simple de cr√©ation de produit avec g√©n√©ration d'EAN"""
    
    print("üè∑Ô∏è  Test Simple de Cr√©ation de Produit avec EAN")
    print("=" * 50)
    
    # 1. R√©cup√©rer une cat√©gorie et une marque existantes
    category = Category.objects.first()
    brand = Brand.objects.first()
    
    if not category or not brand:
        print("‚ùå Aucune cat√©gorie ou marque trouv√©e. Cr√©ons-en une...")
        if not category:
            category = Category.objects.create(name="Test Category", slug="test-category")
        if not brand:
            brand = Brand.objects.create(name="Test Brand", slug="test-brand")
    
    print(f"‚úÖ Cat√©gorie: {category.name}")
    print(f"‚úÖ Marque: {brand.name}")
    
    # 2. Cr√©er un nouveau produit
    print("\n2Ô∏è‚É£ Cr√©ation d'un nouveau produit...")
    
    product_data = {
        "name": "Produit Test EAN Simple",
        "cug": "EANSIMPLE001",
        "description": "Produit de test pour v√©rifier la g√©n√©ration automatique d'EAN",
        "purchase_price": 1000,
        "selling_price": 1500,
        "quantity": 10,
        "category": category,
        "brand": brand,
        "is_active": True
    }
    
    try:
        # Cr√©er le produit (l'EAN sera g√©n√©r√© automatiquement)
        product = Product.objects.create(**product_data)
        print(f"‚úÖ Produit cr√©√© avec succ√®s (ID: {product.id})")
        print(f"   Nom: {product.name}")
        print(f"   CUG: {product.cug}")
        print(f"   EAN G√©n√©r√©: {product.generated_ean}")
        
        # V√©rifier que l'EAN a √©t√© g√©n√©r√©
        if product.generated_ean:
            ean = product.generated_ean
            print(f"\n‚úÖ EAN g√©n√©r√© automatiquement: {ean}")
            
            # V√©rifier la validit√© de l'EAN
            if len(ean) == 13 and ean.isdigit():
                print(f"‚úÖ EAN valide (13 chiffres)")
            else:
                print(f"‚ùå EAN invalide: {ean}")
                return False
            
            # V√©rifier que l'EAN commence par le pr√©fixe attendu
            if ean.startswith('200'):
                print(f"‚úÖ EAN utilise le pr√©fixe correct (200)")
            else:
                print(f"‚ùå EAN n'utilise pas le pr√©fixe attendu: {ean}")
                return False
            
            # V√©rifier que l'EAN correspond au CUG
            expected_ean = generate_ean13_from_cug(product.cug)
            if ean == expected_ean:
                print(f"‚úÖ EAN correspond au CUG: {expected_ean}")
            else:
                print(f"‚ùå EAN ne correspond pas au CUG: attendu={expected_ean}, actuel={ean}")
                return False
        else:
            print(f"‚ùå Aucun EAN g√©n√©r√© trouv√©")
            return False
        
        # 3. Tester la mise √† jour du produit
        print("\n3Ô∏è‚É£ Test de mise √† jour du produit...")
        
        product.name = "Produit Test EAN Modifi√©"
        product.save()
        
        # V√©rifier que l'EAN n'a pas chang√©
        product.refresh_from_db()
        if product.generated_ean == ean:
            print(f"‚úÖ EAN inchang√© apr√®s mise √† jour: {product.generated_ean}")
        else:
            print(f"‚ùå EAN modifi√© apr√®s mise √† jour: {product.generated_ean}")
            return False
        
        # 4. Nettoyer le produit de test
        print("\n4Ô∏è‚É£ Nettoyage du produit de test...")
        product.delete()
        print(f"‚úÖ Produit de test supprim√©")
        
        # 5. R√©sum√©
        print("\n5Ô∏è‚É£ R√©sum√© du Test:")
        print("-" * 30)
        print("‚úÖ EAN g√©n√©r√© automatiquement √† la cr√©ation")
        print("‚úÖ EAN valide (13 chiffres, pr√©fixe 200)")
        print("‚úÖ EAN correspond au CUG")
        print("‚úÖ EAN inchang√© apr√®s mise √† jour")
        print("‚úÖ Syst√®me pr√™t pour les produits artisanaux")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du produit: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ D√©marrage du test simple de g√©n√©ration d'EAN...")
    success = test_simple_ean_creation()
    
    if success:
        print("\nüéâ Test r√©ussi ! La g√©n√©ration automatique d'EAN fonctionne parfaitement.")
    else:
        print("\n‚ùå Test √©chou√©. V√©rifiez la configuration.")
        sys.exit(1)
