#!/usr/bin/env python3
"""
Script pour tester la configuration Railway apr√®s d√©ploiement
"""

import os
import requests
import json

def test_railway_configuration():
    """Teste la configuration Railway apr√®s d√©ploiement"""
    print("üß™ Test de la configuration Railway...")
    print("=" * 50)
    
    # R√©cup√©rer l'URL de l'application depuis les variables d'environnement
    railway_url = os.getenv('RAILWAY_APP_URL')
    
    if not railway_url:
        print("‚ùå RAILWAY_APP_URL non d√©finie")
        print("üí° D√©finissez cette variable avec l'URL de votre app Railway")
        return
    
    print(f"üåê URL de l'application : {railway_url}")
    
    # Tests √† effectuer
    tests = [
        {
            'name': 'Health Check',
            'url': f'{railway_url}/health/',
            'method': 'GET',
            'expected_status': 200
        },
        {
            'name': 'Admin Django',
            'url': f'{railway_url}/admin/',
            'method': 'GET',
            'expected_status': 200
        },
        {
            'name': 'API Documentation',
            'url': f'{railway_url}/swagger/',
            'method': 'GET',
            'expected_status': 200
        }
    ]
    
    print("\nüîç Ex√©cution des tests...")
    
    for test in tests:
        try:
            print(f"\nüìã Test : {test['name']}")
            print(f"   URL : {test['url']}")
            
            if test['method'] == 'GET':
                response = requests.get(test['url'], timeout=10)
            else:
                response = requests.post(test['url'], timeout=10)
            
            if response.status_code == test['expected_status']:
                print(f"   ‚úÖ Statut : {response.status_code} (OK)")
            else:
                print(f"   ‚ùå Statut : {response.status_code} (Attendu : {test['expected_status']})")
                
        except requests.exceptions.RequestException as e:
            print(f"   ‚ùå Erreur : {e}")
        except Exception as e:
            print(f"   ‚ùå Erreur inattendue : {e}")
    
    print("\nüìù R√©sum√© des tests :")
    print("‚Ä¢ Si tous les tests passent : Configuration Railway r√©ussie !")
    print("‚Ä¢ Si des tests √©chouent : V√©rifier les logs Railway")
    print("‚Ä¢ Si erreur de connexion : V√©rifier l'URL et le d√©ploiement")

def test_database_connection():
    """Teste la connexion √† la base de donn√©es Railway"""
    print("\nüóÑÔ∏è  Test de connexion √† la base de donn√©es...")
    
    try:
        # Simuler l'environnement Railway
        os.environ['RAILWAY_ENVIRONMENT'] = 'production'
        os.environ['DJANGO_SETTINGS_MODULE'] = 'bolibanastock.settings_railway'
        
        # Importer Django et tester la configuration
        import django
        django.setup()
        
        from django.db import connection
        from django.core.management import execute_from_command_line
        
        # Tester la connexion
        with connection.cursor() as cursor:
            cursor.execute("SELECT 1")
            result = cursor.fetchone()
            
        if result and result[0] == 1:
            print("   ‚úÖ Connexion √† la base de donn√©es r√©ussie")
        else:
            print("   ‚ùå Connexion √† la base de donn√©es √©chou√©e")
            
    except Exception as e:
        print(f"   ‚ùå Erreur de connexion : {e}")
        print("   üí° V√©rifiez que DATABASE_URL est correctement configur√©e")

if __name__ == "__main__":
    test_railway_configuration()
    test_database_connection()
