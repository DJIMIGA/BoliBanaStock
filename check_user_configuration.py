#!/usr/bin/env python3
"""
V√©rification de la configuration de l'utilisateur mobile
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bolibanastock.settings')
django.setup()

from django.contrib.auth import get_user_model
from app.core.models import Configuration
from app.inventory.models import Product

User = get_user_model()

def check_user_configuration():
    """V√©rifier la configuration de l'utilisateur mobile"""
    print("üîç V√©rification de la configuration de l'utilisateur mobile...")
    
    try:
        # R√©cup√©rer l'utilisateur mobile
        user = User.objects.get(username='mobile')
        print(f"‚úÖ Utilisateur trouv√©: {user.username}")
        print(f"   ID: {user.id}")
        print(f"   Email: {user.email}")
        print(f"   Pr√©nom: {user.first_name}")
        print(f"   Nom: {user.last_name}")
        print(f"   Superuser: {user.is_superuser}")
        print(f"   Staff: {user.is_staff}")
        print(f"   Actif: {user.is_active}")
        
        # V√©rifier la configuration du site
        try:
            site_config = user.site_configuration
            if site_config:
                print(f"üè¢ Site configur√©: {site_config.name}")
                print(f"   ID du site: {site_config.id}")
                print(f"   Description: {site_config.description}")
            else:
                print("‚ùå Aucun site configur√© pour cet utilisateur")
        except AttributeError:
            print("‚ùå L'attribut site_configuration n'existe pas sur l'utilisateur")
        
        # V√©rifier les permissions
        print(f"\nüîê Permissions de l'utilisateur:")
        print(f"   Permissions: {list(user.user_permissions.all())}")
        print(f"   Groupes: {list(user.groups.all())}")
        
        # V√©rifier les produits
        print(f"\nüì¶ V√©rification des produits:")
        total_products = Product.objects.count()
        print(f"   Total des produits: {total_products}")
        
        if hasattr(user, 'site_configuration') and user.site_configuration:
            site_products = Product.objects.filter(site_configuration=user.site_configuration).count()
            print(f"   Produits du site de l'utilisateur: {site_products}")
        else:
            print("   Produits du site de l'utilisateur: 0 (pas de site configur√©)")
        
        # V√©rifier les configurations disponibles
        print(f"\nüè¢ Configurations de sites disponibles:")
        configs = Configuration.objects.all()
        if configs:
            for config in configs:
                product_count = Product.objects.filter(site_configuration=config).count()
                print(f"   {config.name} (ID: {config.id}): {product_count} produits")
        else:
            print("   Aucune configuration de site trouv√©e")
        
        return user
        
    except User.DoesNotExist:
        print("‚ùå Utilisateur 'mobile' non trouv√©")
        return None
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
        return None

def fix_user_configuration():
    """Corriger la configuration de l'utilisateur mobile"""
    print(f"\nüîß Correction de la configuration...")
    
    try:
        user = User.objects.get(username='mobile')
        
        # V√©rifier s'il y a des configurations de site
        configs = Configuration.objects.all()
        if not configs:
            print("‚ùå Aucune configuration de site disponible")
            print("üí° Cr√©ation d'une configuration par d√©faut...")
            
            # Cr√©er une configuration par d√©faut
            default_config = Configuration.objects.create(
                name="Site Principal",
                description="Configuration par d√©faut pour l'application mobile",
                is_active=True
            )
            print(f"‚úÖ Configuration cr√©√©e: {default_config.name} (ID: {default_config.id})")
            configs = [default_config]
        
        # Assigner la premi√®re configuration disponible √† l'utilisateur
        if configs:
            selected_config = configs[0]
            user.site_configuration = selected_config
            user.save()
            print(f"‚úÖ Site configur√© pour l'utilisateur: {selected_config.name}")
            
            # V√©rifier que la correction a fonctionn√©
            user.refresh_from_db()
            if user.site_configuration:
                print(f"‚úÖ Configuration corrig√©e: {user.site_configuration.name}")
            else:
                print("‚ùå La correction n'a pas fonctionn√©")
        else:
            print("‚ùå Impossible de corriger la configuration")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la correction: {e}")

def main():
    """Fonction principale"""
    print("üöÄ V√©rification de la configuration utilisateur mobile")
    print("=" * 60)
    
    # V√©rification
    user = check_user_configuration()
    
    if user:
        # Si l'utilisateur n'a pas de site configur√©, proposer de le corriger
        if not hasattr(user, 'site_configuration') or not user.site_configuration:
            print(f"\n‚ö†Ô∏è  L'utilisateur n'a pas de site configur√©")
            print(f"üí° Cela explique l'erreur 500 sur /products/")
            
            response = input("Voulez-vous corriger la configuration ? (o/n): ")
            if response.lower() in ['o', 'oui', 'y', 'yes']:
                fix_user_configuration()
            else:
                print("Configuration non modifi√©e")
        else:
            print(f"\n‚úÖ L'utilisateur est correctement configur√©")
    
    print(f"\n" + "=" * 60)
    print("‚úÖ V√©rification termin√©e!")

if __name__ == "__main__":
    main()
