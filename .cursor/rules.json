{
    "version": 1,
    "rules": [
        {
            "name": "Modèles Django",
            "description": "Règles pour la création des modèles Django",
            "patterns": [
                {
                    "name": "Signaux pour les Modèles",
                    "description": "Ajouter des signaux pour les opérations automatiques",
                    "template": [
                        "from django.db.models.signals import post_save, post_delete",
                        "from django.dispatch import receiver",
                        "",
                        "@receiver(post_save, sender=${ModelName})",
                        "def ${model_name}_saved(sender, instance, created, **kwargs):",
                        "    if created:",
                        "        # Actions lors de la création",
                        "        pass",
                        "    else:",
                        "        # Actions lors de la modification",
                        "        pass",
                        "",
                        "@receiver(post_delete, sender=${ModelName})",
                        "def ${model_name}_deleted(sender, instance, **kwargs):",
                        "    # Actions lors de la suppression",
                        "    pass"
                    ]
                },
                {
                    "name": "Méthodes de Cache",
                    "description": "Ajouter des méthodes pour le cache",
                    "template": [
                        "from django.core.cache import cache",
                        "",
                        "def get_cache_key(self):",
                        "    return f'${model_name}_{self.id}'",
                        "",
                        "def clear_cache(self):",
                        "    cache.delete(self.get_cache_key())",
                        "",
                        "def get_cached_data(self):",
                        "    return cache.get_or_set(",
                        "        self.get_cache_key(),",
                        "        lambda: self.get_data(),",
                        "        timeout=300  # 5 minutes",
                        "    )"
                    ]
                }
            ]
        },
        {
            "name": "Vues Django",
            "description": "Règles pour la création des vues Django",
            "patterns": [
                {
                    "name": "Cache pour les Vues",
                    "description": "Utiliser le décorateur de cache pour les vues",
                    "template": [
                        "from app.core.utils import cache_result",
                        "",
                        "@cache_result(timeout=300)  # Cache pour 5 minutes",
                        "def get_queryset(self):",
                        "    queryset = super().get_queryset()",
                        "    return queryset.select_related()",
                        "",
                        "@cache_result(timeout=300)",
                        "def get_context_data(self, **kwargs):",
                        "    context = super().get_context_data(**kwargs)",
                        "    return context"
                    ]
                },
                {
                    "name": "Gestion des Fichiers",
                    "description": "Utiliser le stockage optimisé pour les fichiers",
                    "template": [
                        "from app.core.storage import storage",
                        "",
                        "def form_valid(self, form):",
                        "    if 'image' in self.request.FILES:",
                        "        # Supprimer l'ancienne image si elle existe",
                        "        if self.object and self.object.image:",
                        "            self.object.image.delete(save=False)",
                        "        # Sauvegarder la nouvelle image",
                        "        form.instance.image = storage.save_file(",
                        "            self.request.FILES['image'],",
                        "            '${app_name}/${model_name}'",
                        "        )",
                        "    return super().form_valid(form)"
                    ]
                }
            ]
        },
        {
            "name": "Tests",
            "description": "Règles pour les tests",
            "patterns": [
                {
                    "name": "Tests des Signaux",
                    "description": "Tester les signaux",
                    "template": [
                        "from django.test import TestCase",
                        "from django.db.models.signals import post_save, post_delete",
                        "",
                        "class ${ModelName}SignalsTest(TestCase):",
                        "    def setUp(self):",
                        "        # Désactiver les signaux pour les tests",
                        "        self.signals = [post_save, post_delete]",
                        "        self.receivers = []",
                        "        for signal in self.signals:",
                        "            self.receivers.append(signal.receivers)",
                        "            signal.receivers = []",
                        "",
                        "    def tearDown(self):",
                        "        # Réactiver les signaux",
                        "        for signal, receivers in zip(self.signals, self.receivers):",
                        "            signal.receivers = receivers",
                        "",
                        "    def test_${model_name}_created_signal(self):",
                        "        # Test de création",
                        "        pass",
                        "",
                        "    def test_${model_name}_deleted_signal(self):",
                        "        # Test de suppression",
                        "        pass"
                    ]
                },
                {
                    "name": "Tests du Cache",
                    "description": "Tester le cache",
                    "template": [
                        "from django.test import TestCase",
                        "from django.core.cache import cache",
                        "",
                        "class ${ModelName}CacheTest(TestCase):",
                        "    def setUp(self):",
                        "        cache.clear()",
                        "",
                        "    def test_cache_set(self):",
                        "        # Test de mise en cache",
                        "        pass",
                        "",
                        "    def test_cache_get(self):",
                        "        # Test de récupération du cache",
                        "        pass",
                        "",
                        "    def test_cache_invalidation(self):",
                        "        # Test d'invalidation du cache",
                        "        pass"
                    ]
                }
            ]
        },
        {
            "name": "Backup et Storage",
            "description": "Règles pour la gestion des sauvegardes et du stockage",
            "patterns": [
                {
                    "name": "Configuration du Storage",
                    "description": "Configurer le stockage optimisé",
                    "template": [
                        "from app.core.storage import storage",
                        "from app.core.backup import backup_manager",
                        "",
                        "class ${ModelName}Storage:",
                        "    def __init__(self):",
                        "        self.storage = storage",
                        "        self.backup = backup_manager",
                        "",
                        "    def save_file(self, file, path):",
                        "        # Sauvegarder le fichier avec optimisation",
                        "        return self.storage.save_file(file, path)",
                        "",
                        "    def delete_file(self, path):",
                        "        # Supprimer le fichier",
                        "        return self.storage.delete_file(path)",
                        "",
                        "    def backup_data(self):",
                        "        # Créer une sauvegarde des données",
                        "        return self.backup.create_backup()",
                        "",
                        "    def restore_data(self, backup_id):",
                        "        # Restaurer les données depuis une sauvegarde",
                        "        return self.backup.restore_backup(backup_id)"
                    ]
                },
                {
                    "name": "Gestion des Backups",
                    "description": "Gérer les sauvegardes automatiques",
                    "template": [
                        "from app.core.backup import backup_manager",
                        "from django.core.management.base import BaseCommand",
                        "",
                        "class Command(BaseCommand):",
                        "    help = 'Gestion des sauvegardes'",
                        "",
                        "    def add_arguments(self, parser):",
                        "        parser.add_argument(",
                        "            '--action',",
                        "            choices=['create', 'restore', 'list', 'clean'],",
                        "            required=True,",
                        "            help='Action à effectuer'",
                        "        )",
                        "        parser.add_argument(",
                        "            '--backup-id',",
                        "            help='ID de la sauvegarde pour la restauration'",
                        "        )",
                        "",
                        "    def handle(self, *args, **options):",
                        "        action = options['action']",
                        "        if action == 'create':",
                        "            backup_id = backup_manager.create_backup()",
                        "            self.stdout.write(self.style.SUCCESS(f'Sauvegarde créée: {backup_id}'))",
                        "        elif action == 'restore':",
                        "            backup_id = options['backup_id']",
                        "            if not backup_id:",
                        "                self.stdout.write(self.style.ERROR('ID de sauvegarde requis'))",
                        "                return",
                        "            backup_manager.restore_backup(backup_id)",
                        "            self.stdout.write(self.style.SUCCESS('Restauration terminée'))",
                        "        elif action == 'list':",
                        "            backups = backup_manager.list_backups()",
                        "            for backup in backups:",
                        "                self.stdout.write(f'{backup.id}: {backup.created_at}')",
                        "        elif action == 'clean':",
                        "            backup_manager.clean_old_backups()",
                        "            self.stdout.write(self.style.SUCCESS('Nettoyage terminé'))"
                    ]
                }
            ]
        },
        {
            "name": "Sécurité",
            "description": "Règles pour la sécurité de l'application",
            "patterns": [
                {
                    "name": "Permissions et Authentification",
                    "description": "Gérer les permissions et l'authentification",
                    "template": [
                        "from django.contrib.auth.mixins import LoginRequiredMixin, PermissionRequiredMixin",
                        "from django.contrib.auth.decorators import login_required, permission_required",
                        "",
                        "class ${ModelName}View(LoginRequiredMixin, PermissionRequiredMixin):",
                        "    permission_required = '${app_name}.view_${model_name}'",
                        "    login_url = '/login/'",
                        "",
                        "    def get_permission_required(self):",
                        "        return [f'${app_name}.{perm}_{self.model._meta.model_name}'",
                        "                for perm in ['view', 'add', 'change', 'delete']]",
                        "",
                        "@login_required",
                        "@permission_required('${app_name}.view_${model_name}')",
                        "def ${model_name}_view(request):",
                        "    pass"
                    ]
                },
                {
                    "name": "Protection CSRF",
                    "description": "Protection contre les attaques CSRF",
                    "template": [
                        "from django.views.decorators.csrf import csrf_protect",
                        "from django.utils.decorators import method_decorator",
                        "",
                        "@method_decorator(csrf_protect, name='dispatch')",
                        "class ${ModelName}View(View):",
                        "    pass",
                        "",
                        "@csrf_protect",
                        "def ${model_name}_view(request):",
                        "    pass"
                    ]
                }
            ]
        },
        {
            "name": "API REST",
            "description": "Règles pour la création d'API REST",
            "patterns": [
                {
                    "name": "API ViewSet",
                    "description": "Créer un ViewSet pour l'API",
                    "template": [
                        "from rest_framework import viewsets, permissions",
                        "from rest_framework.decorators import action",
                        "from rest_framework.response import Response",
                        "",
                        "class ${ModelName}ViewSet(viewsets.ModelViewSet):",
                        "    queryset = ${ModelName}.objects.all()",
                        "    serializer_class = ${ModelName}Serializer",
                        "    permission_classes = [permissions.IsAuthenticated]",
                        "",
                        "    @action(detail=True, methods=['post'])",
                        "    def custom_action(self, request, pk=None):",
                        "        instance = self.get_object()",
                        "        # Logique personnalisée",
                        "        return Response({'status': 'success'})",
                        "",
                        "    def perform_create(self, serializer):",
                        "        serializer.save(created_by=self.request.user)"
                    ]
                },
                {
                    "name": "API Serializer",
                    "description": "Créer un serializer pour l'API",
                    "template": [
                        "from rest_framework import serializers",
                        "",
                        "class ${ModelName}Serializer(serializers.ModelSerializer):",
                        "    class Meta:",
                        "        model = ${ModelName}",
                        "        fields = '__all__'",
                        "        read_only_fields = ('created_at', 'updated_at')",
                        "",
                        "    def validate(self, data):",
                        "        # Validation personnalisée",
                        "        return data"
                    ]
                }
            ]
        },
        {
            "name": "Formulaires",
            "description": "Règles pour la création de formulaires",
            "patterns": [
                {
                    "name": "Formulaire avec Validation",
                    "description": "Créer un formulaire avec validation",
                    "template": [
                        "from django import forms",
                        "from django.core.validators import MinValueValidator, MaxValueValidator",
                        "",
                        "class ${ModelName}Form(forms.ModelForm):",
                        "    class Meta:",
                        "        model = ${ModelName}",
                        "        fields = '__all__'",
                        "        widgets = {",
                        "            'description': forms.Textarea(attrs={'rows': 4}),",
                        "            'date': forms.DateInput(attrs={'type': 'date'}),",
                        "        }",
                        "",
                        "    def clean(self):",
                        "        cleaned_data = super().clean()",
                        "        # Validation personnalisée",
                        "        return cleaned_data",
                        "",
                        "    def save(self, commit=True):",
                        "        instance = super().save(commit=False)",
                        "        if commit:",
                        "            instance.save()",
                        "        return instance"
                    ]
                }
            ]
        },
        {
            "name": "Documentation",
            "description": "Règles pour la documentation du code",
            "patterns": [
                {
                    "name": "Documentation des Classes",
                    "description": "Documenter les classes et méthodes",
                    "template": [
                        "class ${ModelName}:",
                        "    \"\"\"",
                        "    Description de la classe ${ModelName}.",
                        "",
                        "    Attributes:",
                        "        attr1 (type): Description de l'attribut 1",
                        "        attr2 (type): Description de l'attribut 2",
                        "    \"\"\"",
                        "",
                        "    def method_name(self, param1, param2):",
                        "        \"\"\"",
                        "        Description de la méthode.",
                        "",
                        "        Args:",
                        "            param1 (type): Description du paramètre 1",
                        "            param2 (type): Description du paramètre 2",
                        "",
                        "        Returns:",
                        "            type: Description de la valeur de retour",
                        "",
                        "        Raises:",
                        "            ExceptionType: Description de l'exception",
                        "        \"\"\"",
                        "        pass"
                    ]
                },
                {
                    "name": "Documentation API",
                    "description": "Documenter les endpoints API",
                    "template": [
                        "from drf_yasg.utils import swagger_auto_schema",
                        "from drf_yasg import openapi",
                        "",
                        "class ${ModelName}ViewSet(viewsets.ModelViewSet):",
                        "    @swagger_auto_schema(",
                        "        operation_description=\"Description de l'opération\",",
                        "        responses={",
                        "            200: openapi.Response(",
                        "                description=\"Succès\",",
                        "                schema=${ModelName}Serializer",
                        "            ),",
                        "            400: \"Requête invalide\",",
                        "            404: \"Non trouvé\"",
                        "        }",
                        "    )",
                        "    def list(self, request):",
                        "        pass"
                    ]
                }
            ]
        },
        {
            "name": "Django + Tailwind",
            "description": "Règles d'or pour une application Django avec Tailwind CSS",
            "patterns": [
                {
                    "name": "Configuration Tailwind",
                    "description": "Configuration de base de Tailwind",
                    "template": [
                        "// tailwind.config.js",
                        "module.exports = {",
                        "  content: [",
                        "    './templates/**/*.html',",
                        "    './static/**/*.js',",
                        "  ],",
                        "  theme: {",
                        "    extend: {",
                        "      colors: {",
                        "        primary: {",
                        "          DEFAULT: '#1a56db',",
                        "          dark: '#1e429f',",
                        "        },",
                        "        secondary: {",
                        "          DEFAULT: '#7c3aed',",
                        "          dark: '#5b21b6',",
                        "        },",
                        "      },",
                        "      fontFamily: {",
                        "        sans: ['Inter var', 'sans-serif'],",
                        "      },",
                        "    },",
                        "  },",
                        "  plugins: [",
                        "    require('@tailwindcss/forms'),",
                        "    require('@tailwindcss/typography'),",
                        "    require('@tailwindcss/aspect-ratio'),",
                        "  ],",
                        "}"
                    ]
                },
                {
                    "name": "Interactivité et Curseurs",
                    "description": "Classes pour l'interactivité et les curseurs",
                    "template": [
                        "{% comment %} components/interactive.html {% endcomment %}",
                        "<button class=\"cursor-pointer hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary\">",
                        "    {{ text }}",
                        "</button>",
                        "",
                        "<button disabled class=\"cursor-not-allowed opacity-50\">",
                        "    {{ text }}",
                        "</button>",
                        "",
                        "<div class=\"cursor-wait\">",
                        "    Chargement...",
                        "</div>",
                        "",
                        "<a href=\"#\" class=\"cursor-pointer hover:text-primary transition-colors duration-200\">",
                        "    {{ text }}",
                        "</a>"
                    ]
                },
                {
                    "name": "Accessibilité",
                    "description": "Composants accessibles avec ARIA",
                    "template": [
                        "<nav aria-label=\"Navigation principale\" class=\"bg-white shadow-sm\">",
                        "    <div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">",
                        "        <div class=\"flex justify-between h-16\">",
                        "            <div class=\"flex\" role=\"menubar\">",
                        "                <a href=\"{% url 'home' %}\" class=\"flex items-center\" role=\"menuitem\" aria-current=\"page\">",
                        "                    <span class=\"text-xl font-bold text-gray-900\">${ProjectName}</span>",
                        "                </a>",
                        "            </div>",
                        "        </div>",
                        "    </div>",
                        "</nav>",
                        "",
                        "<main id=\"main-content\" role=\"main\" class=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\">",
                        "    {% if messages %}",
                        "        <div role=\"alert\" aria-live=\"polite\">",
                        "            {% for message in messages %}",
                        "                <div class=\"rounded-md p-4 mb-4 {% if message.tags == 'success' %}bg-green-50 text-green-700{% elif message.tags == 'error' %}bg-red-50 text-red-700{% else %}bg-blue-50 text-blue-700{% endif %}\">",
                        "                    {{ message }}",
                        "                </div>",
                        "            {% endfor %}",
                        "        </div>",
                        "    {% endif %}",
                        "",
                        "    {% block content %}{% endblock %}",
                        "</main>"
                    ]
                },
                {
                    "name": "Optimisation des Images",
                    "description": "Optimisation des images avec Tailwind",
                    "template": [
                        "<div class=\"relative aspect-w-16 aspect-h-9\">",
                        "    <img",
                        "        src=\"{{ image.url }}\"",
                        "        alt=\"{{ image.alt }}\"",
                        "        class=\"object-cover w-full h-full\"",
                        "        loading=\"lazy\"",
                        "        decoding=\"async\"",
                        "    >",
                        "</div>",
                        "",
                        "<picture>",
                        "    <source",
                        "        srcset=\"{{ image.webp.url }}\"",
                        "        type=\"image/webp\"",
                        "    >",
                        "    <img",
                        "        src=\"{{ image.jpg.url }}\"",
                        "        alt=\"{{ image.alt }}\"",
                        "        class=\"w-full h-auto\"",
                        "        loading=\"lazy\"",
                        "        decoding=\"async\"",
                        "    >",
                        "</picture>"
                    ]
                },
                {
                    "name": "Cache et Performance",
                    "description": "Optimisation des performances avec le cache",
                    "template": [
                        "{% load cache %}",
                        "",
                        "{% cache 300 'header' %}",
                        "    {% include 'components/header.html' %}",
                        "{% endcache %}",
                        "",
                        "{% cache 300 'sidebar' request.user.id %}",
                        "    {% include 'components/sidebar.html' %}",
                        "{% endcache %}",
                        "",
                        "<div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">",
                        "    {% for item in items %}",
                        "        {% cache 300 'item' item.id %}",
                        "            {% include 'components/item_card.html' with item=item %}",
                        "        {% endcache %}",
                        "    {% endfor %}",
                        "</div>"
                    ]
                },
                {
                    "name": "Maintenance et Documentation",
                    "description": "Templates pour la maintenance et la documentation",
                    "template": [
                        "{% comment %} maintenance/backup.html {% endcomment %}",
                        "<div class=\"bg-white shadow sm:rounded-lg\">",
                        "    <div class=\"px-4 py-5 sm:p-6\">",
                        "        <h3 class=\"text-lg leading-6 font-medium text-gray-900\">",
                        "            Sauvegarde du système",
                        "        </h3>",
                        "        <div class=\"mt-2 max-w-xl text-sm text-gray-500\">",
                        "            <p>Dernière sauvegarde : {{ last_backup_date }}</p>",
                        "        </div>",
                        "        <div class=\"mt-5\">",
                        "            <button type=\"button\" class=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary\">",
                        "                Créer une sauvegarde",
                        "            </button>",
                        "        </div>",
                        "    </div>",
                        "</div>",
                        "",
                        "{% comment %} maintenance/logs.html {% endcomment %}",
                        "<div class=\"bg-white shadow overflow-hidden sm:rounded-md\">",
                        "    <ul role=\"list\" class=\"divide-y divide-gray-200\">",
                        "        {% for log in logs %}",
                        "            <li>",
                        "                <div class=\"px-4 py-4 sm:px-6\">",
                        "                    <div class=\"flex items-center justify-between\">",
                        "                        <p class=\"text-sm font-medium text-primary truncate\">",
                        "                            {{ log.message }}",
                        "                        </p>",
                        "                        <div class=\"ml-2 flex-shrink-0 flex\">",
                        "                            <p class=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full {% if log.level == 'error' %}bg-red-100 text-red-800{% elif log.level == 'warning' %}bg-yellow-100 text-yellow-800{% else %}bg-green-100 text-green-800{% endif %}\">",
                        "                                {{ log.level }}",
                        "                            </p>",
                        "                        </div>",
                        "                    </div>",
                        "                    <div class=\"mt-2 sm:flex sm:justify-between\">",
                        "                        <div class=\"sm:flex\">",
                        "                            <p class=\"flex items-center text-sm text-gray-500\">",
                        "                                {{ log.timestamp }}",
                        "                            </p>",
                        "                        </div>",
                        "                    </div>",
                        "                </div>",
                        "            </li>",
                        "        {% endfor %}",
                        "    </ul>",
                        "</div>"
                    ]
                },
                {
                    "name": "Mobile First",
                    "description": "Templates optimisés pour mobile en premier",
                    "template": [
                        "{% comment %} components/mobile_layout.html {% endcomment %}",
                        "<div class=\"min-h-screen bg-gray-50\">",
                        "    {% comment %} Header Mobile {% endcomment %}",
                        "    <header class=\"bg-white shadow-sm fixed w-full top-0 z-50 md:relative\">",
                        "        <div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">",
                        "            <div class=\"flex justify-between h-16\">",
                        "                {% comment %} Logo {% endcomment %}",
                        "                <div class=\"flex-shrink-0 flex items-center\">",
                        "                    <a href=\"{% url 'home' %}\" class=\"text-xl font-bold text-gray-900\">",
                        "                        ${ProjectName}",
                        "                    </a>",
                        "                </div>",
                        "",
                        "                {% comment %} Menu Mobile {% endcomment %}",
                        "                <div class=\"flex items-center md:hidden\">",
                        "                    <button type=\"button\" class=\"mobile-menu-button inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-primary\" aria-controls=\"mobile-menu\" aria-expanded=\"false\">",
                        "                        <span class=\"sr-only\">Ouvrir le menu</span>",
                        "                        <svg class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">",
                        "                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 6h16M4 12h16M4 18h16\" />",
                        "                        </svg>",
                        "                    </button>",
                        "                </div>",
                        "",
                        "                {% comment %} Menu Desktop {% endcomment %}",
                        "                <nav class=\"hidden md:flex space-x-8\">",
                        "                    {% for item in menu_items %}",
                        "                        <a href=\"{{ item.url }}\" class=\"text-gray-500 hover:text-gray-900 px-3 py-2 text-sm font-medium\">",
                        "                            {{ item.name }}",
                        "                        </a>",
                        "                    {% endfor %}",
                        "                </nav>",
                        "            </div>",
                        "        </div>",
                        "",
                        "        {% comment %} Menu Mobile Dropdown {% endcomment %}",
                        "        <div class=\"hidden md:hidden\" id=\"mobile-menu\">",
                        "            <div class=\"pt-2 pb-3 space-y-1\">",
                        "                {% for item in menu_items %}",
                        "                    <a href=\"{{ item.url }}\" class=\"block px-3 py-2 text-base font-medium text-gray-500 hover:text-gray-900 hover:bg-gray-50\">",
                        "                        {{ item.name }}",
                        "                    </a>",
                        "                {% endfor %}",
                        "            </div>",
                        "        </div>",
                        "    </header>",
                        "",
                        "    {% comment %} Main Content {% endcomment %}",
                        "    <main class=\"pt-16 md:pt-0\">",
                        "        <div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">",
                        "            {% block content %}{% endblock %}",
                        "        </div>",
                        "    </main>",
                        "",
                        "    {% comment %} Footer Mobile {% endcomment %}",
                        "    <footer class=\"bg-white mt-auto\">",
                        "        <div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">",
                        "            <div class=\"grid grid-cols-1 md:grid-cols-3 gap-8\">",
                        "                {% for section in footer_sections %}",
                        "                    <div class=\"space-y-4\">",
                        "                        <h3 class=\"text-sm font-semibold text-gray-900 tracking-wider uppercase\">",
                        "                            {{ section.title }}",
                        "                        </h3>",
                        "                        <ul class=\"space-y-2\">",
                        "                            {% for link in section.links %}",
                        "                                <li>",
                        "                                    <a href=\"{{ link.url }}\" class=\"text-base text-gray-500 hover:text-gray-900\">",
                        "                                        {{ link.name }}",
                        "                                    </a>",
                        "                                </li>",
                        "                            {% endfor %}",
                        "                        </ul>",
                        "                    </div>",
                        "                {% endfor %}",
                        "            </div>",
                        "        </div>",
                        "    </footer>",
                        "</div>",
                        "",
                        "{% comment %} Mobile Menu JavaScript {% endcomment %}",
                        "<script>",
                        "    document.addEventListener('DOMContentLoaded', function() {",
                        "        const mobileMenuButton = document.querySelector('.mobile-menu-button');",
                        "        const mobileMenu = document.querySelector('#mobile-menu');",
                        "",
                        "        mobileMenuButton.addEventListener('click', function() {",
                        "            mobileMenu.classList.toggle('hidden');",
                        "            const expanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';",
                        "            mobileMenuButton.setAttribute('aria-expanded', !expanded);",
                        "        });",
                        "    });",
                        "</script>",
                        "",
                        "{% comment %} Exemple de grille responsive {% endcomment %}",
                        "<div class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">",
                        "    {% for item in items %}",
                        "        <div class=\"bg-white rounded-lg shadow p-4\">",
                        "            <h3 class=\"text-lg font-medium text-gray-900\">{{ item.title }}</h3>",
                        "            <p class=\"mt-2 text-sm text-gray-500\">{{ item.description }}</p>",
                        "        </div>",
                        "    {% endfor %}",
                        "</div>",
                        "",
                        "{% comment %} Exemple de formulaire mobile {% endcomment %}",
                        "<form class=\"space-y-4\">",
                        "    <div>",
                        "        <label for=\"email\" class=\"block text-sm font-medium text-gray-700\">Email</label>",
                        "        <div class=\"mt-1\">",
                        "            <input type=\"email\" name=\"email\" id=\"email\" class=\"shadow-sm focus:ring-primary focus:border-primary block w-full sm:text-sm border-gray-300 rounded-md\" placeholder=\"vous@exemple.com\">",
                        "        </div>",
                        "    </div>",
                        "    <div>",
                        "        <label for=\"message\" class=\"block text-sm font-medium text-gray-700\">Message</label>",
                        "        <div class=\"mt-1\">",
                        "            <textarea id=\"message\" name=\"message\" rows=\"3\" class=\"shadow-sm focus:ring-primary focus:border-primary block w-full sm:text-sm border-gray-300 rounded-md\"></textarea>",
                        "        </div>",
                        "    </div>",
                        "    <div class=\"flex justify-end\">",
                        "        <button type=\"submit\" class=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary\">",
                        "            Envoyer",
                        "        </button>",
                        "    </div>",
                        "</form>"
                    ]
                }
            ]
        },
        {
            "name": "Gestion des Défis",
            "description": "Règles pour gérer les défis mobiles et serveur",
            "patterns": [
                {
                    "name": "PWA Configuration",
                    "description": "Configuration Progressive Web App",
                    "template": [
                        "// manifest.json",
                        "{",
                        "  \"name\": \"${ProjectName}\",",
                        "  \"short_name\": \"${ProjectName}\",",
                        "  \"start_url\": \"/\",",
                        "  \"display\": \"standalone\",",
                        "  \"background_color\": \"#ffffff\",",
                        "  \"theme_color\": \"#1a56db\",",
                        "  \"icons\": [",
                        "    {",
                        "      \"src\": \"/static/icons/icon-192x192.png\",",
                        "      \"sizes\": \"192x192\",",
                        "      \"type\": \"image/png\"",
                        "    },",
                        "    {",
                        "      \"src\": \"/static/icons/icon-512x512.png\",",
                        "      \"sizes\": \"512x512\",",
                        "      \"type\": \"image/png\"",
                        "    }",
                        "  ]",
                        "}",
                        "",
                        "// service-worker.js",
                        "const CACHE_NAME = '${ProjectName}-v1';",
                        "const urlsToCache = [",
                        "  '/',",
                        "  '/static/css/main.css',",
                        "  '/static/js/main.js',",
                        "  '/offline.html'",
                        "];",
                        "",
                        "self.addEventListener('install', event => {",
                        "  event.waitUntil(",
                        "    caches.open(CACHE_NAME)",
                        "      .then(cache => cache.addAll(urlsToCache))",
                        "  );",
                        "});",
                        "",
                        "self.addEventListener('fetch', event => {",
                        "  event.respondWith(",
                        "    caches.match(event.request)",
                        "      .then(response => response || fetch(event.request))",
                        "  );",
                        "});"
                    ]
                },
                {
                    "name": "Mode Hors-ligne",
                    "description": "Gestion du mode hors-ligne",
                    "template": [
                        "// offline.js",
                        "const offlineData = {",
                        "  products: [],",
                        "  categories: [],",
                        "  lastSync: null",
                        "};",
                        "",
                        "// Stockage local",
                        "const saveOfflineData = (key, data) => {",
                        "  try {",
                        "    localStorage.setItem(key, JSON.stringify(data));",
                        "    return true;",
                        "  } catch (e) {",
                        "    console.error('Erreur de stockage:', e);",
                        "    return false;",
                        "  }",
                        "};",
                        "",
                        "// Synchronisation",
                        "const syncData = async () => {",
                        "  if (navigator.onLine) {",
                        "    try {",
                        "      const response = await fetch('/api/sync/');",
                        "      const data = await response.json();",
                        "      saveOfflineData('offlineData', data);",
                        "      return true;",
                        "    } catch (e) {",
                        "      console.error('Erreur de sync:', e);",
                        "      return false;",
                        "    }",
                        "  }",
                        "  return false;",
                        "};"
                    ]
                },
                {
                    "name": "Optimisation Performance",
                    "description": "Optimisation des performances",
                    "template": [
                        "// settings.py",
                        "CACHES = {",
                        "    'default': {",
                        "        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',",
                        "        'LOCATION': 'unique-snowflake',",
                        "    }",
                        "}",
                        "",
                        "MIDDLEWARE = [",
                        "    'django.middleware.cache.UpdateCacheMiddleware',",
                        "    'django.middleware.common.CommonMiddleware',",
                        "    'django.middleware.cache.FetchFromCacheMiddleware',",
                        "    # ... autres middleware",
                        "]",
                        "",
                        "CACHE_MIDDLEWARE_ALIAS = 'default'",
                        "CACHE_MIDDLEWARE_SECONDS = 600",
                        "CACHE_MIDDLEWARE_KEY_PREFIX = ''",
                        "",
                        "// Compression des images",
                        "from PIL import Image",
                        "import io",
                        "",
                        "def optimize_image(image_file, max_size=(800, 800), quality=85):",
                        "    img = Image.open(image_file)",
                        "    img.thumbnail(max_size, Image.LANCZOS)",
                        "    output = io.BytesIO()",
                        "    img.save(output, format='JPEG', quality=quality, optimize=True)",
                        "    return output.getvalue()"
                    ]
                },
                {
                    "name": "Sécurité Serveur",
                    "description": "Configuration de sécurité du serveur",
                    "template": [
                        "// security.py",
                        "from django.conf import settings",
                        "",
                        "def configure_security():",
                        "    # Configuration SSL",
                        "    settings.SECURE_SSL_REDIRECT = True",
                        "    settings.SESSION_COOKIE_SECURE = True",
                        "    settings.CSRF_COOKIE_SECURE = True",
                        "",
                        "    # Headers de sécurité",
                        "    settings.SECURE_BROWSER_XSS_FILTER = True",
                        "    settings.SECURE_CONTENT_TYPE_NOSNIFF = True",
                        "    settings.X_FRAME_OPTIONS = 'DENY'",
                        "",
                        "    # Protection contre les attaques",
                        "    settings.SECURE_HSTS_SECONDS = 31536000",
                        "    settings.SECURE_HSTS_INCLUDE_SUBDOMAINS = True",
                        "    settings.SECURE_HSTS_PRELOAD = True",
                        "",
                        "// backup.py",
                        "import os",
                        "import shutil",
                        "from datetime import datetime",
                        "",
                        "def create_backup():",
                        "    backup_dir = 'backups'",
                        "    if not os.path.exists(backup_dir):",
                        "        os.makedirs(backup_dir)",
                        "",
                        "    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')",
                        "    backup_name = f'backup_{timestamp}'",
                        "",
                        "    # Sauvegarde de la base de données",
                        "    os.system(f'pg_dump -U postgres ${ProjectName} > {backup_dir}/{backup_name}.sql')",
                        "",
                        "    # Sauvegarde des médias",
                        "    shutil.make_archive(f'{backup_dir}/{backup_name}_media', 'zip', 'media')",
                        "",
                        "    return f'{backup_name}'"
                    ]
                },
                {
                    "name": "Mode Économique",
                    "description": "Configuration du mode économique",
                    "template": [
                        "// settings.py",
                        "LIGHT_MODE = {",
                        "    'ENABLED': True,",
                        "    'FEATURES': {",
                        "        'ANIMATIONS': False,",
                        "        'IMAGES': True,",
                        "        'VIDEOS': False,",
                        "        'REALTIME_UPDATES': False"
                        "    }",
                        "}",
                        "",
                        "// light_mode.js",
                        "const lightMode = {",
                        "    init() {",
                        "        this.checkBattery();",
                        "        this.checkNetwork();",
                        "        this.applySettings();",
                        "    },",
                        "",
                        "    checkBattery() {",
                        "        if ('getBattery' in navigator) {",
                        "            navigator.getBattery().then(battery => {",
                        "                if (battery.level < 0.2) {",
                        "                    this.enableLightMode();",
                        "                }",
                        "            });",
                        "        }",
                        "    },",
                        "",
                        "    checkNetwork() {",
                        "        if (!navigator.onLine || navigator.connection?.saveData) {",
                        "            this.enableLightMode();",
                        "        }",
                        "    },",
                        "",
                        "    enableLightMode() {",
                        "        document.body.classList.add('light-mode');",
                        "        // Désactiver les fonctionnalités gourmandes",
                        "        this.disableAnimations();",
                        "        this.disableRealtimeUpdates();",
                        "    }",
                        "",
                        "    disableAnimations() {",
                        "        document.body.classList.add('no-animations');",
                        "    },",
                        "",
                        "    disableRealtimeUpdates() {",
                        "        // Désactiver les mises à jour en temps réel",
                        "        if (window.socket) {",
                        "            window.socket.disconnect();",
                        "        }",
                        "    }",
                        "",
                        "    applySettings() {",
                        "        const settings = window.LIGHT_MODE_SETTINGS;",
                        "        if (settings.ENABLED) {",
                        "            if (!settings.FEATURES.ANIMATIONS) {",
                        "                this.disableAnimations();",
                        "            }",
                        "            if (!settings.FEATURES.REALTIME_UPDATES) {",
                        "                this.disableRealtimeUpdates();",
                        "            }",
                        "        }",
                        "    }",
                        "};",
                        "",
                        "document.addEventListener('DOMContentLoaded', () => lightMode.init());"
                    ]
                }
            ]
        }
    ]
} 