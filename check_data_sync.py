#!/usr/bin/env python3
"""
Script de v√©rification de la synchronisation des donn√©es
Compare les donn√©es entre l'environnement local et Railway
"""

import os
import sys
import django
import requests
import json
from datetime import datetime

def setup_django():
    """Configurer Django"""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bolibanastock.settings')
    django.setup()

def get_local_data_count():
    """Obtenir le nombre d'enregistrements en local"""
    print("üìä Comptage des donn√©es locales...")
    
    try:
        from django.contrib.auth.models import User
        from app.inventory.models import Product, Category, Brand
        
        counts = {
            'users': User.objects.count(),
            'products': Product.objects.count(),
            'categories': Category.objects.count(),
            'brands': Brand.objects.count(),
        }
        
        print("   ‚úÖ Donn√©es locales r√©cup√©r√©es")
        return counts
        
    except Exception as e:
        print(f"   ‚ùå Erreur r√©cup√©ration donn√©es locales: {e}")
        return None

def get_railway_data_count():
    """Obtenir le nombre d'enregistrements sur Railway"""
    print("üöÇ Comptage des donn√©es Railway...")
    
    try:
        # URL de l'API Railway
        railway_url = "https://web-production-e896b.up.railway.app"
        
        # Endpoint de statistiques (√† cr√©er si n√©cessaire)
        stats_url = f"{railway_url}/api/v1/stats/"
        
        response = requests.get(stats_url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print("   ‚úÖ Donn√©es Railway r√©cup√©r√©es")
            return data
        else:
            print(f"   ‚ö†Ô∏è Impossible de r√©cup√©rer les stats Railway: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"   ‚ùå Erreur r√©cup√©ration donn√©es Railway: {e}")
        return None

def compare_data_counts(local_counts, railway_counts):
    """Comparer les comptages de donn√©es"""
    print("\nüìà Comparaison des donn√©es :")
    print("=" * 40)
    
    if not local_counts or not railway_counts:
        print("‚ùå Impossible de comparer les donn√©es")
        return False
    
    models = ['users', 'products', 'categories', 'brands']
    
    print(f"{'Mod√®le':<15} {'Local':<10} {'Railway':<10} {'Statut':<10}")
    print("-" * 45)
    
    all_synced = True
    
    for model in models:
        local_count = local_counts.get(model, 0)
        railway_count = railway_counts.get(model, 0)
        
        if local_count == railway_count:
            status = "‚úÖ Synchro"
        else:
            status = "‚ùå Diff√©rent"
            all_synced = False
        
        print(f"{model:<15} {local_count:<10} {railway_count:<10} {status:<10}")
    
    return all_synced

def check_railway_connection():
    """V√©rifier la connexion √† Railway"""
    print("üîç V√©rification de la connexion Railway...")
    
    try:
        response = requests.get(
            "https://web-production-e896b.up.railway.app/health/",
            timeout=10
        )
        
        if response.status_code == 200:
            print("   ‚úÖ Railway accessible")
            return True
        else:
            print(f"   ‚ö†Ô∏è Railway accessible mais health check: {response.status_code}")
            return True
            
    except Exception as e:
        print(f"   ‚ùå Railway inaccessible: {e}")
        return False

def check_mobile_user_sync():
    """V√©rifier la synchronisation de l'utilisateur mobile"""
    print("\nüì± V√©rification utilisateur mobile...")
    
    try:
        # V√©rifier en local
        from django.contrib.auth.models import User
        
        try:
            local_mobile = User.objects.get(username='mobile')
            print(f"   ‚úÖ Utilisateur mobile local: ID {local_mobile.id}")
        except User.DoesNotExist:
            print("   ‚ùå Utilisateur mobile non trouv√© en local")
            return False
        
        # V√©rifier sur Railway
        railway_url = "https://web-production-e896b.up.railway.app"
        login_data = {
            'username': 'mobile',
            'password': '12345678'
        }
        
        response = requests.post(
            f"{railway_url}/api/v1/auth/login/",
            json=login_data,
            headers={'Content-Type': 'application/json'},
            timeout=10
        )
        
        if response.status_code == 200:
            print("   ‚úÖ Utilisateur mobile Railway: Authentification r√©ussie")
            return True
        else:
            print(f"   ‚ùå Utilisateur mobile Railway: √âchec authentification ({response.status_code})")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur v√©rification utilisateur mobile: {e}")
        return False

def main():
    """Fonction principale"""
    print("üîÑ V√©rification de la synchronisation des donn√©es")
    print("=" * 60)
    
    # V√©rifier la connexion Railway
    if not check_railway_connection():
        print("‚ùå Impossible de v√©rifier Railway")
        return 1
    
    # Configurer Django
    try:
        setup_django()
    except Exception as e:
        print(f"‚ùå Erreur configuration Django: {e}")
        return 1
    
    # R√©cup√©rer les comptages
    local_counts = get_local_data_count()
    railway_counts = get_railway_data_count()
    
    # Comparer les donn√©es
    if local_counts and railway_counts:
        synced = compare_data_counts(local_counts, railway_counts)
        
        if synced:
            print("\nüéâ Toutes les donn√©es sont synchronis√©es!")
        else:
            print("\n‚ö†Ô∏è Certaines donn√©es ne sont pas synchronis√©es")
            print("üí° Ex√©cutez: python migrate_railway_database.py")
    else:
        print("\n‚ö†Ô∏è Impossible de comparer les donn√©es")
    
    # V√©rifier l'utilisateur mobile
    mobile_synced = check_mobile_user_sync()
    
    # R√©sum√© final
    print("\nüìã R√âSUM√â :")
    print("=" * 30)
    
    if local_counts:
        print(f"üìä Donn√©es locales: {sum(local_counts.values())} enregistrements")
    
    if railway_counts:
        print(f"üöÇ Donn√©es Railway: {sum(railway_counts.values())} enregistrements")
    
    if mobile_synced:
        print("üì± Utilisateur mobile: ‚úÖ Synchronis√©")
    else:
        print("üì± Utilisateur mobile: ‚ùå Non synchronis√©")
    
    print("\nüí° Recommandations :")
    if not synced or not mobile_synced:
        print("   üîÑ Ex√©cutez: python migrate_railway_database.py")
        print("   üöÄ Puis: git push origin main")
    else:
        print("   ‚úÖ Tout est synchronis√©!")
        print("   üåê Railway: https://web-production-e896b.up.railway.app")
    
    return 0

if __name__ == '__main__':
    sys.exit(main())
